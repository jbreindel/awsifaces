// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	pricing "github.com/aws/aws-sdk-go-v2/service/pricing"
	mock "github.com/stretchr/testify/mock"
)

// PricingClient is an autogenerated mock type for the PricingClient type
type PricingClient struct {
	mock.Mock
}

// DescribeServices provides a mock function with given fields: ctx, params, optFns
func (_m *PricingClient) DescribeServices(ctx context.Context, params *pricing.DescribeServicesInput, optFns ...func(*pricing.Options)) (*pricing.DescribeServicesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeServices")
	}

	var r0 *pricing.DescribeServicesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pricing.DescribeServicesInput, ...func(*pricing.Options)) (*pricing.DescribeServicesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pricing.DescribeServicesInput, ...func(*pricing.Options)) *pricing.DescribeServicesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pricing.DescribeServicesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pricing.DescribeServicesInput, ...func(*pricing.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAttributeValues provides a mock function with given fields: ctx, params, optFns
func (_m *PricingClient) GetAttributeValues(ctx context.Context, params *pricing.GetAttributeValuesInput, optFns ...func(*pricing.Options)) (*pricing.GetAttributeValuesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAttributeValues")
	}

	var r0 *pricing.GetAttributeValuesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pricing.GetAttributeValuesInput, ...func(*pricing.Options)) (*pricing.GetAttributeValuesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pricing.GetAttributeValuesInput, ...func(*pricing.Options)) *pricing.GetAttributeValuesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pricing.GetAttributeValuesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pricing.GetAttributeValuesInput, ...func(*pricing.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPriceListFileUrl provides a mock function with given fields: ctx, params, optFns
func (_m *PricingClient) GetPriceListFileUrl(ctx context.Context, params *pricing.GetPriceListFileUrlInput, optFns ...func(*pricing.Options)) (*pricing.GetPriceListFileUrlOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPriceListFileUrl")
	}

	var r0 *pricing.GetPriceListFileUrlOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pricing.GetPriceListFileUrlInput, ...func(*pricing.Options)) (*pricing.GetPriceListFileUrlOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pricing.GetPriceListFileUrlInput, ...func(*pricing.Options)) *pricing.GetPriceListFileUrlOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pricing.GetPriceListFileUrlOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pricing.GetPriceListFileUrlInput, ...func(*pricing.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProducts provides a mock function with given fields: ctx, params, optFns
func (_m *PricingClient) GetProducts(ctx context.Context, params *pricing.GetProductsInput, optFns ...func(*pricing.Options)) (*pricing.GetProductsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProducts")
	}

	var r0 *pricing.GetProductsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pricing.GetProductsInput, ...func(*pricing.Options)) (*pricing.GetProductsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pricing.GetProductsInput, ...func(*pricing.Options)) *pricing.GetProductsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pricing.GetProductsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pricing.GetProductsInput, ...func(*pricing.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPriceLists provides a mock function with given fields: ctx, params, optFns
func (_m *PricingClient) ListPriceLists(ctx context.Context, params *pricing.ListPriceListsInput, optFns ...func(*pricing.Options)) (*pricing.ListPriceListsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPriceLists")
	}

	var r0 *pricing.ListPriceListsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pricing.ListPriceListsInput, ...func(*pricing.Options)) (*pricing.ListPriceListsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pricing.ListPriceListsInput, ...func(*pricing.Options)) *pricing.ListPriceListsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pricing.ListPriceListsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pricing.ListPriceListsInput, ...func(*pricing.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *PricingClient) Options() pricing.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 pricing.Options
	if rf, ok := ret.Get(0).(func() pricing.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(pricing.Options)
	}

	return r0
}

// NewPricingClient creates a new instance of PricingClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPricingClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *PricingClient {
	mock := &PricingClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
