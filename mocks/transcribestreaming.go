// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	transcribestreaming "github.com/aws/aws-sdk-go-v2/service/transcribestreaming"
)

// TranscribestreamingClient is an autogenerated mock type for the TranscribestreamingClient type
type TranscribestreamingClient struct {
	mock.Mock
}

// Options provides a mock function with given fields:
func (_m *TranscribestreamingClient) Options() transcribestreaming.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 transcribestreaming.Options
	if rf, ok := ret.Get(0).(func() transcribestreaming.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(transcribestreaming.Options)
	}

	return r0
}

// StartCallAnalyticsStreamTranscription provides a mock function with given fields: ctx, params, optFns
func (_m *TranscribestreamingClient) StartCallAnalyticsStreamTranscription(ctx context.Context, params *transcribestreaming.StartCallAnalyticsStreamTranscriptionInput, optFns ...func(*transcribestreaming.Options)) (*transcribestreaming.StartCallAnalyticsStreamTranscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartCallAnalyticsStreamTranscription")
	}

	var r0 *transcribestreaming.StartCallAnalyticsStreamTranscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transcribestreaming.StartCallAnalyticsStreamTranscriptionInput, ...func(*transcribestreaming.Options)) (*transcribestreaming.StartCallAnalyticsStreamTranscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transcribestreaming.StartCallAnalyticsStreamTranscriptionInput, ...func(*transcribestreaming.Options)) *transcribestreaming.StartCallAnalyticsStreamTranscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transcribestreaming.StartCallAnalyticsStreamTranscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transcribestreaming.StartCallAnalyticsStreamTranscriptionInput, ...func(*transcribestreaming.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartMedicalStreamTranscription provides a mock function with given fields: ctx, params, optFns
func (_m *TranscribestreamingClient) StartMedicalStreamTranscription(ctx context.Context, params *transcribestreaming.StartMedicalStreamTranscriptionInput, optFns ...func(*transcribestreaming.Options)) (*transcribestreaming.StartMedicalStreamTranscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartMedicalStreamTranscription")
	}

	var r0 *transcribestreaming.StartMedicalStreamTranscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transcribestreaming.StartMedicalStreamTranscriptionInput, ...func(*transcribestreaming.Options)) (*transcribestreaming.StartMedicalStreamTranscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transcribestreaming.StartMedicalStreamTranscriptionInput, ...func(*transcribestreaming.Options)) *transcribestreaming.StartMedicalStreamTranscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transcribestreaming.StartMedicalStreamTranscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transcribestreaming.StartMedicalStreamTranscriptionInput, ...func(*transcribestreaming.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartStreamTranscription provides a mock function with given fields: ctx, params, optFns
func (_m *TranscribestreamingClient) StartStreamTranscription(ctx context.Context, params *transcribestreaming.StartStreamTranscriptionInput, optFns ...func(*transcribestreaming.Options)) (*transcribestreaming.StartStreamTranscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartStreamTranscription")
	}

	var r0 *transcribestreaming.StartStreamTranscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *transcribestreaming.StartStreamTranscriptionInput, ...func(*transcribestreaming.Options)) (*transcribestreaming.StartStreamTranscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *transcribestreaming.StartStreamTranscriptionInput, ...func(*transcribestreaming.Options)) *transcribestreaming.StartStreamTranscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transcribestreaming.StartStreamTranscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *transcribestreaming.StartStreamTranscriptionInput, ...func(*transcribestreaming.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTranscribestreamingClient creates a new instance of TranscribestreamingClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTranscribestreamingClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *TranscribestreamingClient {
	mock := &TranscribestreamingClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
