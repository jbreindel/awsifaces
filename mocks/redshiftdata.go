// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	redshiftdata "github.com/aws/aws-sdk-go-v2/service/redshiftdata"
	mock "github.com/stretchr/testify/mock"
)

// RedshiftdataClient is an autogenerated mock type for the RedshiftdataClient type
type RedshiftdataClient struct {
	mock.Mock
}

// BatchExecuteStatement provides a mock function with given fields: ctx, params, optFns
func (_m *RedshiftdataClient) BatchExecuteStatement(ctx context.Context, params *redshiftdata.BatchExecuteStatementInput, optFns ...func(*redshiftdata.Options)) (*redshiftdata.BatchExecuteStatementOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchExecuteStatement")
	}

	var r0 *redshiftdata.BatchExecuteStatementOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftdata.BatchExecuteStatementInput, ...func(*redshiftdata.Options)) (*redshiftdata.BatchExecuteStatementOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftdata.BatchExecuteStatementInput, ...func(*redshiftdata.Options)) *redshiftdata.BatchExecuteStatementOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftdata.BatchExecuteStatementOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftdata.BatchExecuteStatementInput, ...func(*redshiftdata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelStatement provides a mock function with given fields: ctx, params, optFns
func (_m *RedshiftdataClient) CancelStatement(ctx context.Context, params *redshiftdata.CancelStatementInput, optFns ...func(*redshiftdata.Options)) (*redshiftdata.CancelStatementOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelStatement")
	}

	var r0 *redshiftdata.CancelStatementOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftdata.CancelStatementInput, ...func(*redshiftdata.Options)) (*redshiftdata.CancelStatementOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftdata.CancelStatementInput, ...func(*redshiftdata.Options)) *redshiftdata.CancelStatementOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftdata.CancelStatementOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftdata.CancelStatementInput, ...func(*redshiftdata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeStatement provides a mock function with given fields: ctx, params, optFns
func (_m *RedshiftdataClient) DescribeStatement(ctx context.Context, params *redshiftdata.DescribeStatementInput, optFns ...func(*redshiftdata.Options)) (*redshiftdata.DescribeStatementOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeStatement")
	}

	var r0 *redshiftdata.DescribeStatementOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftdata.DescribeStatementInput, ...func(*redshiftdata.Options)) (*redshiftdata.DescribeStatementOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftdata.DescribeStatementInput, ...func(*redshiftdata.Options)) *redshiftdata.DescribeStatementOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftdata.DescribeStatementOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftdata.DescribeStatementInput, ...func(*redshiftdata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTable provides a mock function with given fields: ctx, params, optFns
func (_m *RedshiftdataClient) DescribeTable(ctx context.Context, params *redshiftdata.DescribeTableInput, optFns ...func(*redshiftdata.Options)) (*redshiftdata.DescribeTableOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeTable")
	}

	var r0 *redshiftdata.DescribeTableOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftdata.DescribeTableInput, ...func(*redshiftdata.Options)) (*redshiftdata.DescribeTableOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftdata.DescribeTableInput, ...func(*redshiftdata.Options)) *redshiftdata.DescribeTableOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftdata.DescribeTableOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftdata.DescribeTableInput, ...func(*redshiftdata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteStatement provides a mock function with given fields: ctx, params, optFns
func (_m *RedshiftdataClient) ExecuteStatement(ctx context.Context, params *redshiftdata.ExecuteStatementInput, optFns ...func(*redshiftdata.Options)) (*redshiftdata.ExecuteStatementOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteStatement")
	}

	var r0 *redshiftdata.ExecuteStatementOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftdata.ExecuteStatementInput, ...func(*redshiftdata.Options)) (*redshiftdata.ExecuteStatementOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftdata.ExecuteStatementInput, ...func(*redshiftdata.Options)) *redshiftdata.ExecuteStatementOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftdata.ExecuteStatementOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftdata.ExecuteStatementInput, ...func(*redshiftdata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStatementResult provides a mock function with given fields: ctx, params, optFns
func (_m *RedshiftdataClient) GetStatementResult(ctx context.Context, params *redshiftdata.GetStatementResultInput, optFns ...func(*redshiftdata.Options)) (*redshiftdata.GetStatementResultOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetStatementResult")
	}

	var r0 *redshiftdata.GetStatementResultOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftdata.GetStatementResultInput, ...func(*redshiftdata.Options)) (*redshiftdata.GetStatementResultOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftdata.GetStatementResultInput, ...func(*redshiftdata.Options)) *redshiftdata.GetStatementResultOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftdata.GetStatementResultOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftdata.GetStatementResultInput, ...func(*redshiftdata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDatabases provides a mock function with given fields: ctx, params, optFns
func (_m *RedshiftdataClient) ListDatabases(ctx context.Context, params *redshiftdata.ListDatabasesInput, optFns ...func(*redshiftdata.Options)) (*redshiftdata.ListDatabasesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDatabases")
	}

	var r0 *redshiftdata.ListDatabasesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftdata.ListDatabasesInput, ...func(*redshiftdata.Options)) (*redshiftdata.ListDatabasesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftdata.ListDatabasesInput, ...func(*redshiftdata.Options)) *redshiftdata.ListDatabasesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftdata.ListDatabasesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftdata.ListDatabasesInput, ...func(*redshiftdata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSchemas provides a mock function with given fields: ctx, params, optFns
func (_m *RedshiftdataClient) ListSchemas(ctx context.Context, params *redshiftdata.ListSchemasInput, optFns ...func(*redshiftdata.Options)) (*redshiftdata.ListSchemasOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSchemas")
	}

	var r0 *redshiftdata.ListSchemasOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftdata.ListSchemasInput, ...func(*redshiftdata.Options)) (*redshiftdata.ListSchemasOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftdata.ListSchemasInput, ...func(*redshiftdata.Options)) *redshiftdata.ListSchemasOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftdata.ListSchemasOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftdata.ListSchemasInput, ...func(*redshiftdata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListStatements provides a mock function with given fields: ctx, params, optFns
func (_m *RedshiftdataClient) ListStatements(ctx context.Context, params *redshiftdata.ListStatementsInput, optFns ...func(*redshiftdata.Options)) (*redshiftdata.ListStatementsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListStatements")
	}

	var r0 *redshiftdata.ListStatementsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftdata.ListStatementsInput, ...func(*redshiftdata.Options)) (*redshiftdata.ListStatementsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftdata.ListStatementsInput, ...func(*redshiftdata.Options)) *redshiftdata.ListStatementsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftdata.ListStatementsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftdata.ListStatementsInput, ...func(*redshiftdata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTables provides a mock function with given fields: ctx, params, optFns
func (_m *RedshiftdataClient) ListTables(ctx context.Context, params *redshiftdata.ListTablesInput, optFns ...func(*redshiftdata.Options)) (*redshiftdata.ListTablesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTables")
	}

	var r0 *redshiftdata.ListTablesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftdata.ListTablesInput, ...func(*redshiftdata.Options)) (*redshiftdata.ListTablesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftdata.ListTablesInput, ...func(*redshiftdata.Options)) *redshiftdata.ListTablesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftdata.ListTablesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftdata.ListTablesInput, ...func(*redshiftdata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *RedshiftdataClient) Options() redshiftdata.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 redshiftdata.Options
	if rf, ok := ret.Get(0).(func() redshiftdata.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(redshiftdata.Options)
	}

	return r0
}

// NewRedshiftdataClient creates a new instance of RedshiftdataClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRedshiftdataClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *RedshiftdataClient {
	mock := &RedshiftdataClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
