// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	lexruntimev2 "github.com/aws/aws-sdk-go-v2/service/lexruntimev2"
	mock "github.com/stretchr/testify/mock"
)

// Lexruntimev2Client is an autogenerated mock type for the Lexruntimev2Client type
type Lexruntimev2Client struct {
	mock.Mock
}

// DeleteSession provides a mock function with given fields: ctx, params, optFns
func (_m *Lexruntimev2Client) DeleteSession(ctx context.Context, params *lexruntimev2.DeleteSessionInput, optFns ...func(*lexruntimev2.Options)) (*lexruntimev2.DeleteSessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSession")
	}

	var r0 *lexruntimev2.DeleteSessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexruntimev2.DeleteSessionInput, ...func(*lexruntimev2.Options)) (*lexruntimev2.DeleteSessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexruntimev2.DeleteSessionInput, ...func(*lexruntimev2.Options)) *lexruntimev2.DeleteSessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexruntimev2.DeleteSessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexruntimev2.DeleteSessionInput, ...func(*lexruntimev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSession provides a mock function with given fields: ctx, params, optFns
func (_m *Lexruntimev2Client) GetSession(ctx context.Context, params *lexruntimev2.GetSessionInput, optFns ...func(*lexruntimev2.Options)) (*lexruntimev2.GetSessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSession")
	}

	var r0 *lexruntimev2.GetSessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexruntimev2.GetSessionInput, ...func(*lexruntimev2.Options)) (*lexruntimev2.GetSessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexruntimev2.GetSessionInput, ...func(*lexruntimev2.Options)) *lexruntimev2.GetSessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexruntimev2.GetSessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexruntimev2.GetSessionInput, ...func(*lexruntimev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *Lexruntimev2Client) Options() lexruntimev2.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 lexruntimev2.Options
	if rf, ok := ret.Get(0).(func() lexruntimev2.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(lexruntimev2.Options)
	}

	return r0
}

// PutSession provides a mock function with given fields: ctx, params, optFns
func (_m *Lexruntimev2Client) PutSession(ctx context.Context, params *lexruntimev2.PutSessionInput, optFns ...func(*lexruntimev2.Options)) (*lexruntimev2.PutSessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutSession")
	}

	var r0 *lexruntimev2.PutSessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexruntimev2.PutSessionInput, ...func(*lexruntimev2.Options)) (*lexruntimev2.PutSessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexruntimev2.PutSessionInput, ...func(*lexruntimev2.Options)) *lexruntimev2.PutSessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexruntimev2.PutSessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexruntimev2.PutSessionInput, ...func(*lexruntimev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RecognizeText provides a mock function with given fields: ctx, params, optFns
func (_m *Lexruntimev2Client) RecognizeText(ctx context.Context, params *lexruntimev2.RecognizeTextInput, optFns ...func(*lexruntimev2.Options)) (*lexruntimev2.RecognizeTextOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RecognizeText")
	}

	var r0 *lexruntimev2.RecognizeTextOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexruntimev2.RecognizeTextInput, ...func(*lexruntimev2.Options)) (*lexruntimev2.RecognizeTextOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexruntimev2.RecognizeTextInput, ...func(*lexruntimev2.Options)) *lexruntimev2.RecognizeTextOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexruntimev2.RecognizeTextOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexruntimev2.RecognizeTextInput, ...func(*lexruntimev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RecognizeUtterance provides a mock function with given fields: ctx, params, optFns
func (_m *Lexruntimev2Client) RecognizeUtterance(ctx context.Context, params *lexruntimev2.RecognizeUtteranceInput, optFns ...func(*lexruntimev2.Options)) (*lexruntimev2.RecognizeUtteranceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RecognizeUtterance")
	}

	var r0 *lexruntimev2.RecognizeUtteranceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexruntimev2.RecognizeUtteranceInput, ...func(*lexruntimev2.Options)) (*lexruntimev2.RecognizeUtteranceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexruntimev2.RecognizeUtteranceInput, ...func(*lexruntimev2.Options)) *lexruntimev2.RecognizeUtteranceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexruntimev2.RecognizeUtteranceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexruntimev2.RecognizeUtteranceInput, ...func(*lexruntimev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartConversation provides a mock function with given fields: ctx, params, optFns
func (_m *Lexruntimev2Client) StartConversation(ctx context.Context, params *lexruntimev2.StartConversationInput, optFns ...func(*lexruntimev2.Options)) (*lexruntimev2.StartConversationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartConversation")
	}

	var r0 *lexruntimev2.StartConversationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexruntimev2.StartConversationInput, ...func(*lexruntimev2.Options)) (*lexruntimev2.StartConversationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexruntimev2.StartConversationInput, ...func(*lexruntimev2.Options)) *lexruntimev2.StartConversationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexruntimev2.StartConversationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexruntimev2.StartConversationInput, ...func(*lexruntimev2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLexruntimev2Client creates a new instance of Lexruntimev2Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLexruntimev2Client(t interface {
	mock.TestingT
	Cleanup(func())
}) *Lexruntimev2Client {
	mock := &Lexruntimev2Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
