// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	medialive "github.com/aws/aws-sdk-go-v2/service/medialive"
	mock "github.com/stretchr/testify/mock"
)

// MedialiveClient is an autogenerated mock type for the MedialiveClient type
type MedialiveClient struct {
	mock.Mock
}

// AcceptInputDeviceTransfer provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) AcceptInputDeviceTransfer(ctx context.Context, params *medialive.AcceptInputDeviceTransferInput, optFns ...func(*medialive.Options)) (*medialive.AcceptInputDeviceTransferOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AcceptInputDeviceTransfer")
	}

	var r0 *medialive.AcceptInputDeviceTransferOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.AcceptInputDeviceTransferInput, ...func(*medialive.Options)) (*medialive.AcceptInputDeviceTransferOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.AcceptInputDeviceTransferInput, ...func(*medialive.Options)) *medialive.AcceptInputDeviceTransferOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.AcceptInputDeviceTransferOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.AcceptInputDeviceTransferInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchDelete provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) BatchDelete(ctx context.Context, params *medialive.BatchDeleteInput, optFns ...func(*medialive.Options)) (*medialive.BatchDeleteOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchDelete")
	}

	var r0 *medialive.BatchDeleteOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.BatchDeleteInput, ...func(*medialive.Options)) (*medialive.BatchDeleteOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.BatchDeleteInput, ...func(*medialive.Options)) *medialive.BatchDeleteOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.BatchDeleteOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.BatchDeleteInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchStart provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) BatchStart(ctx context.Context, params *medialive.BatchStartInput, optFns ...func(*medialive.Options)) (*medialive.BatchStartOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchStart")
	}

	var r0 *medialive.BatchStartOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.BatchStartInput, ...func(*medialive.Options)) (*medialive.BatchStartOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.BatchStartInput, ...func(*medialive.Options)) *medialive.BatchStartOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.BatchStartOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.BatchStartInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchStop provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) BatchStop(ctx context.Context, params *medialive.BatchStopInput, optFns ...func(*medialive.Options)) (*medialive.BatchStopOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchStop")
	}

	var r0 *medialive.BatchStopOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.BatchStopInput, ...func(*medialive.Options)) (*medialive.BatchStopOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.BatchStopInput, ...func(*medialive.Options)) *medialive.BatchStopOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.BatchStopOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.BatchStopInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchUpdateSchedule provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) BatchUpdateSchedule(ctx context.Context, params *medialive.BatchUpdateScheduleInput, optFns ...func(*medialive.Options)) (*medialive.BatchUpdateScheduleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchUpdateSchedule")
	}

	var r0 *medialive.BatchUpdateScheduleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.BatchUpdateScheduleInput, ...func(*medialive.Options)) (*medialive.BatchUpdateScheduleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.BatchUpdateScheduleInput, ...func(*medialive.Options)) *medialive.BatchUpdateScheduleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.BatchUpdateScheduleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.BatchUpdateScheduleInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelInputDeviceTransfer provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) CancelInputDeviceTransfer(ctx context.Context, params *medialive.CancelInputDeviceTransferInput, optFns ...func(*medialive.Options)) (*medialive.CancelInputDeviceTransferOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelInputDeviceTransfer")
	}

	var r0 *medialive.CancelInputDeviceTransferOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.CancelInputDeviceTransferInput, ...func(*medialive.Options)) (*medialive.CancelInputDeviceTransferOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.CancelInputDeviceTransferInput, ...func(*medialive.Options)) *medialive.CancelInputDeviceTransferOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.CancelInputDeviceTransferOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.CancelInputDeviceTransferInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClaimDevice provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) ClaimDevice(ctx context.Context, params *medialive.ClaimDeviceInput, optFns ...func(*medialive.Options)) (*medialive.ClaimDeviceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ClaimDevice")
	}

	var r0 *medialive.ClaimDeviceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.ClaimDeviceInput, ...func(*medialive.Options)) (*medialive.ClaimDeviceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.ClaimDeviceInput, ...func(*medialive.Options)) *medialive.ClaimDeviceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.ClaimDeviceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.ClaimDeviceInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateChannel provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) CreateChannel(ctx context.Context, params *medialive.CreateChannelInput, optFns ...func(*medialive.Options)) (*medialive.CreateChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateChannel")
	}

	var r0 *medialive.CreateChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.CreateChannelInput, ...func(*medialive.Options)) (*medialive.CreateChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.CreateChannelInput, ...func(*medialive.Options)) *medialive.CreateChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.CreateChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.CreateChannelInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInput provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) CreateInput(ctx context.Context, params *medialive.CreateInputInput, optFns ...func(*medialive.Options)) (*medialive.CreateInputOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateInput")
	}

	var r0 *medialive.CreateInputOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.CreateInputInput, ...func(*medialive.Options)) (*medialive.CreateInputOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.CreateInputInput, ...func(*medialive.Options)) *medialive.CreateInputOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.CreateInputOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.CreateInputInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInputSecurityGroup provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) CreateInputSecurityGroup(ctx context.Context, params *medialive.CreateInputSecurityGroupInput, optFns ...func(*medialive.Options)) (*medialive.CreateInputSecurityGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateInputSecurityGroup")
	}

	var r0 *medialive.CreateInputSecurityGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.CreateInputSecurityGroupInput, ...func(*medialive.Options)) (*medialive.CreateInputSecurityGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.CreateInputSecurityGroupInput, ...func(*medialive.Options)) *medialive.CreateInputSecurityGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.CreateInputSecurityGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.CreateInputSecurityGroupInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMultiplex provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) CreateMultiplex(ctx context.Context, params *medialive.CreateMultiplexInput, optFns ...func(*medialive.Options)) (*medialive.CreateMultiplexOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMultiplex")
	}

	var r0 *medialive.CreateMultiplexOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.CreateMultiplexInput, ...func(*medialive.Options)) (*medialive.CreateMultiplexOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.CreateMultiplexInput, ...func(*medialive.Options)) *medialive.CreateMultiplexOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.CreateMultiplexOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.CreateMultiplexInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMultiplexProgram provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) CreateMultiplexProgram(ctx context.Context, params *medialive.CreateMultiplexProgramInput, optFns ...func(*medialive.Options)) (*medialive.CreateMultiplexProgramOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMultiplexProgram")
	}

	var r0 *medialive.CreateMultiplexProgramOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.CreateMultiplexProgramInput, ...func(*medialive.Options)) (*medialive.CreateMultiplexProgramOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.CreateMultiplexProgramInput, ...func(*medialive.Options)) *medialive.CreateMultiplexProgramOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.CreateMultiplexProgramOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.CreateMultiplexProgramInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePartnerInput provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) CreatePartnerInput(ctx context.Context, params *medialive.CreatePartnerInputInput, optFns ...func(*medialive.Options)) (*medialive.CreatePartnerInputOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePartnerInput")
	}

	var r0 *medialive.CreatePartnerInputOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.CreatePartnerInputInput, ...func(*medialive.Options)) (*medialive.CreatePartnerInputOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.CreatePartnerInputInput, ...func(*medialive.Options)) *medialive.CreatePartnerInputOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.CreatePartnerInputOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.CreatePartnerInputInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTags provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) CreateTags(ctx context.Context, params *medialive.CreateTagsInput, optFns ...func(*medialive.Options)) (*medialive.CreateTagsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTags")
	}

	var r0 *medialive.CreateTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.CreateTagsInput, ...func(*medialive.Options)) (*medialive.CreateTagsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.CreateTagsInput, ...func(*medialive.Options)) *medialive.CreateTagsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.CreateTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.CreateTagsInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteChannel provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) DeleteChannel(ctx context.Context, params *medialive.DeleteChannelInput, optFns ...func(*medialive.Options)) (*medialive.DeleteChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteChannel")
	}

	var r0 *medialive.DeleteChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.DeleteChannelInput, ...func(*medialive.Options)) (*medialive.DeleteChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.DeleteChannelInput, ...func(*medialive.Options)) *medialive.DeleteChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.DeleteChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.DeleteChannelInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInput provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) DeleteInput(ctx context.Context, params *medialive.DeleteInputInput, optFns ...func(*medialive.Options)) (*medialive.DeleteInputOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInput")
	}

	var r0 *medialive.DeleteInputOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.DeleteInputInput, ...func(*medialive.Options)) (*medialive.DeleteInputOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.DeleteInputInput, ...func(*medialive.Options)) *medialive.DeleteInputOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.DeleteInputOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.DeleteInputInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInputSecurityGroup provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) DeleteInputSecurityGroup(ctx context.Context, params *medialive.DeleteInputSecurityGroupInput, optFns ...func(*medialive.Options)) (*medialive.DeleteInputSecurityGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInputSecurityGroup")
	}

	var r0 *medialive.DeleteInputSecurityGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.DeleteInputSecurityGroupInput, ...func(*medialive.Options)) (*medialive.DeleteInputSecurityGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.DeleteInputSecurityGroupInput, ...func(*medialive.Options)) *medialive.DeleteInputSecurityGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.DeleteInputSecurityGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.DeleteInputSecurityGroupInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMultiplex provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) DeleteMultiplex(ctx context.Context, params *medialive.DeleteMultiplexInput, optFns ...func(*medialive.Options)) (*medialive.DeleteMultiplexOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMultiplex")
	}

	var r0 *medialive.DeleteMultiplexOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.DeleteMultiplexInput, ...func(*medialive.Options)) (*medialive.DeleteMultiplexOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.DeleteMultiplexInput, ...func(*medialive.Options)) *medialive.DeleteMultiplexOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.DeleteMultiplexOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.DeleteMultiplexInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMultiplexProgram provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) DeleteMultiplexProgram(ctx context.Context, params *medialive.DeleteMultiplexProgramInput, optFns ...func(*medialive.Options)) (*medialive.DeleteMultiplexProgramOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMultiplexProgram")
	}

	var r0 *medialive.DeleteMultiplexProgramOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.DeleteMultiplexProgramInput, ...func(*medialive.Options)) (*medialive.DeleteMultiplexProgramOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.DeleteMultiplexProgramInput, ...func(*medialive.Options)) *medialive.DeleteMultiplexProgramOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.DeleteMultiplexProgramOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.DeleteMultiplexProgramInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteReservation provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) DeleteReservation(ctx context.Context, params *medialive.DeleteReservationInput, optFns ...func(*medialive.Options)) (*medialive.DeleteReservationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReservation")
	}

	var r0 *medialive.DeleteReservationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.DeleteReservationInput, ...func(*medialive.Options)) (*medialive.DeleteReservationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.DeleteReservationInput, ...func(*medialive.Options)) *medialive.DeleteReservationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.DeleteReservationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.DeleteReservationInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSchedule provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) DeleteSchedule(ctx context.Context, params *medialive.DeleteScheduleInput, optFns ...func(*medialive.Options)) (*medialive.DeleteScheduleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSchedule")
	}

	var r0 *medialive.DeleteScheduleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.DeleteScheduleInput, ...func(*medialive.Options)) (*medialive.DeleteScheduleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.DeleteScheduleInput, ...func(*medialive.Options)) *medialive.DeleteScheduleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.DeleteScheduleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.DeleteScheduleInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTags provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) DeleteTags(ctx context.Context, params *medialive.DeleteTagsInput, optFns ...func(*medialive.Options)) (*medialive.DeleteTagsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTags")
	}

	var r0 *medialive.DeleteTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.DeleteTagsInput, ...func(*medialive.Options)) (*medialive.DeleteTagsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.DeleteTagsInput, ...func(*medialive.Options)) *medialive.DeleteTagsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.DeleteTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.DeleteTagsInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAccountConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) DescribeAccountConfiguration(ctx context.Context, params *medialive.DescribeAccountConfigurationInput, optFns ...func(*medialive.Options)) (*medialive.DescribeAccountConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAccountConfiguration")
	}

	var r0 *medialive.DescribeAccountConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.DescribeAccountConfigurationInput, ...func(*medialive.Options)) (*medialive.DescribeAccountConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.DescribeAccountConfigurationInput, ...func(*medialive.Options)) *medialive.DescribeAccountConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.DescribeAccountConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.DescribeAccountConfigurationInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeChannel provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) DescribeChannel(ctx context.Context, params *medialive.DescribeChannelInput, optFns ...func(*medialive.Options)) (*medialive.DescribeChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeChannel")
	}

	var r0 *medialive.DescribeChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.DescribeChannelInput, ...func(*medialive.Options)) (*medialive.DescribeChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.DescribeChannelInput, ...func(*medialive.Options)) *medialive.DescribeChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.DescribeChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.DescribeChannelInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeInput provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) DescribeInput(ctx context.Context, params *medialive.DescribeInputInput, optFns ...func(*medialive.Options)) (*medialive.DescribeInputOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeInput")
	}

	var r0 *medialive.DescribeInputOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.DescribeInputInput, ...func(*medialive.Options)) (*medialive.DescribeInputOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.DescribeInputInput, ...func(*medialive.Options)) *medialive.DescribeInputOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.DescribeInputOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.DescribeInputInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeInputDevice provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) DescribeInputDevice(ctx context.Context, params *medialive.DescribeInputDeviceInput, optFns ...func(*medialive.Options)) (*medialive.DescribeInputDeviceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeInputDevice")
	}

	var r0 *medialive.DescribeInputDeviceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.DescribeInputDeviceInput, ...func(*medialive.Options)) (*medialive.DescribeInputDeviceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.DescribeInputDeviceInput, ...func(*medialive.Options)) *medialive.DescribeInputDeviceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.DescribeInputDeviceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.DescribeInputDeviceInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeInputDeviceThumbnail provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) DescribeInputDeviceThumbnail(ctx context.Context, params *medialive.DescribeInputDeviceThumbnailInput, optFns ...func(*medialive.Options)) (*medialive.DescribeInputDeviceThumbnailOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeInputDeviceThumbnail")
	}

	var r0 *medialive.DescribeInputDeviceThumbnailOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.DescribeInputDeviceThumbnailInput, ...func(*medialive.Options)) (*medialive.DescribeInputDeviceThumbnailOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.DescribeInputDeviceThumbnailInput, ...func(*medialive.Options)) *medialive.DescribeInputDeviceThumbnailOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.DescribeInputDeviceThumbnailOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.DescribeInputDeviceThumbnailInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeInputSecurityGroup provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) DescribeInputSecurityGroup(ctx context.Context, params *medialive.DescribeInputSecurityGroupInput, optFns ...func(*medialive.Options)) (*medialive.DescribeInputSecurityGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeInputSecurityGroup")
	}

	var r0 *medialive.DescribeInputSecurityGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.DescribeInputSecurityGroupInput, ...func(*medialive.Options)) (*medialive.DescribeInputSecurityGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.DescribeInputSecurityGroupInput, ...func(*medialive.Options)) *medialive.DescribeInputSecurityGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.DescribeInputSecurityGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.DescribeInputSecurityGroupInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeMultiplex provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) DescribeMultiplex(ctx context.Context, params *medialive.DescribeMultiplexInput, optFns ...func(*medialive.Options)) (*medialive.DescribeMultiplexOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeMultiplex")
	}

	var r0 *medialive.DescribeMultiplexOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.DescribeMultiplexInput, ...func(*medialive.Options)) (*medialive.DescribeMultiplexOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.DescribeMultiplexInput, ...func(*medialive.Options)) *medialive.DescribeMultiplexOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.DescribeMultiplexOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.DescribeMultiplexInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeMultiplexProgram provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) DescribeMultiplexProgram(ctx context.Context, params *medialive.DescribeMultiplexProgramInput, optFns ...func(*medialive.Options)) (*medialive.DescribeMultiplexProgramOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeMultiplexProgram")
	}

	var r0 *medialive.DescribeMultiplexProgramOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.DescribeMultiplexProgramInput, ...func(*medialive.Options)) (*medialive.DescribeMultiplexProgramOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.DescribeMultiplexProgramInput, ...func(*medialive.Options)) *medialive.DescribeMultiplexProgramOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.DescribeMultiplexProgramOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.DescribeMultiplexProgramInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeOffering provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) DescribeOffering(ctx context.Context, params *medialive.DescribeOfferingInput, optFns ...func(*medialive.Options)) (*medialive.DescribeOfferingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeOffering")
	}

	var r0 *medialive.DescribeOfferingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.DescribeOfferingInput, ...func(*medialive.Options)) (*medialive.DescribeOfferingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.DescribeOfferingInput, ...func(*medialive.Options)) *medialive.DescribeOfferingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.DescribeOfferingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.DescribeOfferingInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeReservation provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) DescribeReservation(ctx context.Context, params *medialive.DescribeReservationInput, optFns ...func(*medialive.Options)) (*medialive.DescribeReservationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeReservation")
	}

	var r0 *medialive.DescribeReservationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.DescribeReservationInput, ...func(*medialive.Options)) (*medialive.DescribeReservationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.DescribeReservationInput, ...func(*medialive.Options)) *medialive.DescribeReservationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.DescribeReservationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.DescribeReservationInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSchedule provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) DescribeSchedule(ctx context.Context, params *medialive.DescribeScheduleInput, optFns ...func(*medialive.Options)) (*medialive.DescribeScheduleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeSchedule")
	}

	var r0 *medialive.DescribeScheduleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.DescribeScheduleInput, ...func(*medialive.Options)) (*medialive.DescribeScheduleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.DescribeScheduleInput, ...func(*medialive.Options)) *medialive.DescribeScheduleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.DescribeScheduleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.DescribeScheduleInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeThumbnails provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) DescribeThumbnails(ctx context.Context, params *medialive.DescribeThumbnailsInput, optFns ...func(*medialive.Options)) (*medialive.DescribeThumbnailsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeThumbnails")
	}

	var r0 *medialive.DescribeThumbnailsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.DescribeThumbnailsInput, ...func(*medialive.Options)) (*medialive.DescribeThumbnailsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.DescribeThumbnailsInput, ...func(*medialive.Options)) *medialive.DescribeThumbnailsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.DescribeThumbnailsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.DescribeThumbnailsInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListChannels provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) ListChannels(ctx context.Context, params *medialive.ListChannelsInput, optFns ...func(*medialive.Options)) (*medialive.ListChannelsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListChannels")
	}

	var r0 *medialive.ListChannelsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.ListChannelsInput, ...func(*medialive.Options)) (*medialive.ListChannelsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.ListChannelsInput, ...func(*medialive.Options)) *medialive.ListChannelsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.ListChannelsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.ListChannelsInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInputDeviceTransfers provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) ListInputDeviceTransfers(ctx context.Context, params *medialive.ListInputDeviceTransfersInput, optFns ...func(*medialive.Options)) (*medialive.ListInputDeviceTransfersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListInputDeviceTransfers")
	}

	var r0 *medialive.ListInputDeviceTransfersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.ListInputDeviceTransfersInput, ...func(*medialive.Options)) (*medialive.ListInputDeviceTransfersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.ListInputDeviceTransfersInput, ...func(*medialive.Options)) *medialive.ListInputDeviceTransfersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.ListInputDeviceTransfersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.ListInputDeviceTransfersInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInputDevices provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) ListInputDevices(ctx context.Context, params *medialive.ListInputDevicesInput, optFns ...func(*medialive.Options)) (*medialive.ListInputDevicesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListInputDevices")
	}

	var r0 *medialive.ListInputDevicesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.ListInputDevicesInput, ...func(*medialive.Options)) (*medialive.ListInputDevicesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.ListInputDevicesInput, ...func(*medialive.Options)) *medialive.ListInputDevicesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.ListInputDevicesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.ListInputDevicesInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInputSecurityGroups provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) ListInputSecurityGroups(ctx context.Context, params *medialive.ListInputSecurityGroupsInput, optFns ...func(*medialive.Options)) (*medialive.ListInputSecurityGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListInputSecurityGroups")
	}

	var r0 *medialive.ListInputSecurityGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.ListInputSecurityGroupsInput, ...func(*medialive.Options)) (*medialive.ListInputSecurityGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.ListInputSecurityGroupsInput, ...func(*medialive.Options)) *medialive.ListInputSecurityGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.ListInputSecurityGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.ListInputSecurityGroupsInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInputs provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) ListInputs(ctx context.Context, params *medialive.ListInputsInput, optFns ...func(*medialive.Options)) (*medialive.ListInputsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListInputs")
	}

	var r0 *medialive.ListInputsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.ListInputsInput, ...func(*medialive.Options)) (*medialive.ListInputsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.ListInputsInput, ...func(*medialive.Options)) *medialive.ListInputsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.ListInputsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.ListInputsInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMultiplexPrograms provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) ListMultiplexPrograms(ctx context.Context, params *medialive.ListMultiplexProgramsInput, optFns ...func(*medialive.Options)) (*medialive.ListMultiplexProgramsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMultiplexPrograms")
	}

	var r0 *medialive.ListMultiplexProgramsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.ListMultiplexProgramsInput, ...func(*medialive.Options)) (*medialive.ListMultiplexProgramsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.ListMultiplexProgramsInput, ...func(*medialive.Options)) *medialive.ListMultiplexProgramsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.ListMultiplexProgramsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.ListMultiplexProgramsInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMultiplexes provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) ListMultiplexes(ctx context.Context, params *medialive.ListMultiplexesInput, optFns ...func(*medialive.Options)) (*medialive.ListMultiplexesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMultiplexes")
	}

	var r0 *medialive.ListMultiplexesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.ListMultiplexesInput, ...func(*medialive.Options)) (*medialive.ListMultiplexesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.ListMultiplexesInput, ...func(*medialive.Options)) *medialive.ListMultiplexesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.ListMultiplexesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.ListMultiplexesInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOfferings provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) ListOfferings(ctx context.Context, params *medialive.ListOfferingsInput, optFns ...func(*medialive.Options)) (*medialive.ListOfferingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListOfferings")
	}

	var r0 *medialive.ListOfferingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.ListOfferingsInput, ...func(*medialive.Options)) (*medialive.ListOfferingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.ListOfferingsInput, ...func(*medialive.Options)) *medialive.ListOfferingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.ListOfferingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.ListOfferingsInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListReservations provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) ListReservations(ctx context.Context, params *medialive.ListReservationsInput, optFns ...func(*medialive.Options)) (*medialive.ListReservationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListReservations")
	}

	var r0 *medialive.ListReservationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.ListReservationsInput, ...func(*medialive.Options)) (*medialive.ListReservationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.ListReservationsInput, ...func(*medialive.Options)) *medialive.ListReservationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.ListReservationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.ListReservationsInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) ListTagsForResource(ctx context.Context, params *medialive.ListTagsForResourceInput, optFns ...func(*medialive.Options)) (*medialive.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *medialive.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.ListTagsForResourceInput, ...func(*medialive.Options)) (*medialive.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.ListTagsForResourceInput, ...func(*medialive.Options)) *medialive.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.ListTagsForResourceInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *MedialiveClient) Options() medialive.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 medialive.Options
	if rf, ok := ret.Get(0).(func() medialive.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(medialive.Options)
	}

	return r0
}

// PurchaseOffering provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) PurchaseOffering(ctx context.Context, params *medialive.PurchaseOfferingInput, optFns ...func(*medialive.Options)) (*medialive.PurchaseOfferingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PurchaseOffering")
	}

	var r0 *medialive.PurchaseOfferingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.PurchaseOfferingInput, ...func(*medialive.Options)) (*medialive.PurchaseOfferingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.PurchaseOfferingInput, ...func(*medialive.Options)) *medialive.PurchaseOfferingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.PurchaseOfferingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.PurchaseOfferingInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RebootInputDevice provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) RebootInputDevice(ctx context.Context, params *medialive.RebootInputDeviceInput, optFns ...func(*medialive.Options)) (*medialive.RebootInputDeviceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RebootInputDevice")
	}

	var r0 *medialive.RebootInputDeviceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.RebootInputDeviceInput, ...func(*medialive.Options)) (*medialive.RebootInputDeviceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.RebootInputDeviceInput, ...func(*medialive.Options)) *medialive.RebootInputDeviceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.RebootInputDeviceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.RebootInputDeviceInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RejectInputDeviceTransfer provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) RejectInputDeviceTransfer(ctx context.Context, params *medialive.RejectInputDeviceTransferInput, optFns ...func(*medialive.Options)) (*medialive.RejectInputDeviceTransferOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RejectInputDeviceTransfer")
	}

	var r0 *medialive.RejectInputDeviceTransferOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.RejectInputDeviceTransferInput, ...func(*medialive.Options)) (*medialive.RejectInputDeviceTransferOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.RejectInputDeviceTransferInput, ...func(*medialive.Options)) *medialive.RejectInputDeviceTransferOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.RejectInputDeviceTransferOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.RejectInputDeviceTransferInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestartChannelPipelines provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) RestartChannelPipelines(ctx context.Context, params *medialive.RestartChannelPipelinesInput, optFns ...func(*medialive.Options)) (*medialive.RestartChannelPipelinesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RestartChannelPipelines")
	}

	var r0 *medialive.RestartChannelPipelinesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.RestartChannelPipelinesInput, ...func(*medialive.Options)) (*medialive.RestartChannelPipelinesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.RestartChannelPipelinesInput, ...func(*medialive.Options)) *medialive.RestartChannelPipelinesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.RestartChannelPipelinesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.RestartChannelPipelinesInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartChannel provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) StartChannel(ctx context.Context, params *medialive.StartChannelInput, optFns ...func(*medialive.Options)) (*medialive.StartChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartChannel")
	}

	var r0 *medialive.StartChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.StartChannelInput, ...func(*medialive.Options)) (*medialive.StartChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.StartChannelInput, ...func(*medialive.Options)) *medialive.StartChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.StartChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.StartChannelInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartInputDevice provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) StartInputDevice(ctx context.Context, params *medialive.StartInputDeviceInput, optFns ...func(*medialive.Options)) (*medialive.StartInputDeviceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartInputDevice")
	}

	var r0 *medialive.StartInputDeviceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.StartInputDeviceInput, ...func(*medialive.Options)) (*medialive.StartInputDeviceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.StartInputDeviceInput, ...func(*medialive.Options)) *medialive.StartInputDeviceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.StartInputDeviceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.StartInputDeviceInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartInputDeviceMaintenanceWindow provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) StartInputDeviceMaintenanceWindow(ctx context.Context, params *medialive.StartInputDeviceMaintenanceWindowInput, optFns ...func(*medialive.Options)) (*medialive.StartInputDeviceMaintenanceWindowOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartInputDeviceMaintenanceWindow")
	}

	var r0 *medialive.StartInputDeviceMaintenanceWindowOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.StartInputDeviceMaintenanceWindowInput, ...func(*medialive.Options)) (*medialive.StartInputDeviceMaintenanceWindowOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.StartInputDeviceMaintenanceWindowInput, ...func(*medialive.Options)) *medialive.StartInputDeviceMaintenanceWindowOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.StartInputDeviceMaintenanceWindowOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.StartInputDeviceMaintenanceWindowInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartMultiplex provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) StartMultiplex(ctx context.Context, params *medialive.StartMultiplexInput, optFns ...func(*medialive.Options)) (*medialive.StartMultiplexOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartMultiplex")
	}

	var r0 *medialive.StartMultiplexOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.StartMultiplexInput, ...func(*medialive.Options)) (*medialive.StartMultiplexOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.StartMultiplexInput, ...func(*medialive.Options)) *medialive.StartMultiplexOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.StartMultiplexOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.StartMultiplexInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopChannel provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) StopChannel(ctx context.Context, params *medialive.StopChannelInput, optFns ...func(*medialive.Options)) (*medialive.StopChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopChannel")
	}

	var r0 *medialive.StopChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.StopChannelInput, ...func(*medialive.Options)) (*medialive.StopChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.StopChannelInput, ...func(*medialive.Options)) *medialive.StopChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.StopChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.StopChannelInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopInputDevice provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) StopInputDevice(ctx context.Context, params *medialive.StopInputDeviceInput, optFns ...func(*medialive.Options)) (*medialive.StopInputDeviceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopInputDevice")
	}

	var r0 *medialive.StopInputDeviceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.StopInputDeviceInput, ...func(*medialive.Options)) (*medialive.StopInputDeviceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.StopInputDeviceInput, ...func(*medialive.Options)) *medialive.StopInputDeviceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.StopInputDeviceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.StopInputDeviceInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopMultiplex provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) StopMultiplex(ctx context.Context, params *medialive.StopMultiplexInput, optFns ...func(*medialive.Options)) (*medialive.StopMultiplexOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopMultiplex")
	}

	var r0 *medialive.StopMultiplexOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.StopMultiplexInput, ...func(*medialive.Options)) (*medialive.StopMultiplexOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.StopMultiplexInput, ...func(*medialive.Options)) *medialive.StopMultiplexOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.StopMultiplexOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.StopMultiplexInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransferInputDevice provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) TransferInputDevice(ctx context.Context, params *medialive.TransferInputDeviceInput, optFns ...func(*medialive.Options)) (*medialive.TransferInputDeviceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TransferInputDevice")
	}

	var r0 *medialive.TransferInputDeviceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.TransferInputDeviceInput, ...func(*medialive.Options)) (*medialive.TransferInputDeviceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.TransferInputDeviceInput, ...func(*medialive.Options)) *medialive.TransferInputDeviceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.TransferInputDeviceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.TransferInputDeviceInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAccountConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) UpdateAccountConfiguration(ctx context.Context, params *medialive.UpdateAccountConfigurationInput, optFns ...func(*medialive.Options)) (*medialive.UpdateAccountConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccountConfiguration")
	}

	var r0 *medialive.UpdateAccountConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.UpdateAccountConfigurationInput, ...func(*medialive.Options)) (*medialive.UpdateAccountConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.UpdateAccountConfigurationInput, ...func(*medialive.Options)) *medialive.UpdateAccountConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.UpdateAccountConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.UpdateAccountConfigurationInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateChannel provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) UpdateChannel(ctx context.Context, params *medialive.UpdateChannelInput, optFns ...func(*medialive.Options)) (*medialive.UpdateChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChannel")
	}

	var r0 *medialive.UpdateChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.UpdateChannelInput, ...func(*medialive.Options)) (*medialive.UpdateChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.UpdateChannelInput, ...func(*medialive.Options)) *medialive.UpdateChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.UpdateChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.UpdateChannelInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateChannelClass provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) UpdateChannelClass(ctx context.Context, params *medialive.UpdateChannelClassInput, optFns ...func(*medialive.Options)) (*medialive.UpdateChannelClassOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChannelClass")
	}

	var r0 *medialive.UpdateChannelClassOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.UpdateChannelClassInput, ...func(*medialive.Options)) (*medialive.UpdateChannelClassOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.UpdateChannelClassInput, ...func(*medialive.Options)) *medialive.UpdateChannelClassOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.UpdateChannelClassOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.UpdateChannelClassInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInput provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) UpdateInput(ctx context.Context, params *medialive.UpdateInputInput, optFns ...func(*medialive.Options)) (*medialive.UpdateInputOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInput")
	}

	var r0 *medialive.UpdateInputOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.UpdateInputInput, ...func(*medialive.Options)) (*medialive.UpdateInputOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.UpdateInputInput, ...func(*medialive.Options)) *medialive.UpdateInputOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.UpdateInputOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.UpdateInputInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInputDevice provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) UpdateInputDevice(ctx context.Context, params *medialive.UpdateInputDeviceInput, optFns ...func(*medialive.Options)) (*medialive.UpdateInputDeviceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInputDevice")
	}

	var r0 *medialive.UpdateInputDeviceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.UpdateInputDeviceInput, ...func(*medialive.Options)) (*medialive.UpdateInputDeviceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.UpdateInputDeviceInput, ...func(*medialive.Options)) *medialive.UpdateInputDeviceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.UpdateInputDeviceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.UpdateInputDeviceInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInputSecurityGroup provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) UpdateInputSecurityGroup(ctx context.Context, params *medialive.UpdateInputSecurityGroupInput, optFns ...func(*medialive.Options)) (*medialive.UpdateInputSecurityGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInputSecurityGroup")
	}

	var r0 *medialive.UpdateInputSecurityGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.UpdateInputSecurityGroupInput, ...func(*medialive.Options)) (*medialive.UpdateInputSecurityGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.UpdateInputSecurityGroupInput, ...func(*medialive.Options)) *medialive.UpdateInputSecurityGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.UpdateInputSecurityGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.UpdateInputSecurityGroupInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMultiplex provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) UpdateMultiplex(ctx context.Context, params *medialive.UpdateMultiplexInput, optFns ...func(*medialive.Options)) (*medialive.UpdateMultiplexOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMultiplex")
	}

	var r0 *medialive.UpdateMultiplexOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.UpdateMultiplexInput, ...func(*medialive.Options)) (*medialive.UpdateMultiplexOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.UpdateMultiplexInput, ...func(*medialive.Options)) *medialive.UpdateMultiplexOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.UpdateMultiplexOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.UpdateMultiplexInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMultiplexProgram provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) UpdateMultiplexProgram(ctx context.Context, params *medialive.UpdateMultiplexProgramInput, optFns ...func(*medialive.Options)) (*medialive.UpdateMultiplexProgramOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMultiplexProgram")
	}

	var r0 *medialive.UpdateMultiplexProgramOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.UpdateMultiplexProgramInput, ...func(*medialive.Options)) (*medialive.UpdateMultiplexProgramOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.UpdateMultiplexProgramInput, ...func(*medialive.Options)) *medialive.UpdateMultiplexProgramOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.UpdateMultiplexProgramOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.UpdateMultiplexProgramInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReservation provides a mock function with given fields: ctx, params, optFns
func (_m *MedialiveClient) UpdateReservation(ctx context.Context, params *medialive.UpdateReservationInput, optFns ...func(*medialive.Options)) (*medialive.UpdateReservationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReservation")
	}

	var r0 *medialive.UpdateReservationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.UpdateReservationInput, ...func(*medialive.Options)) (*medialive.UpdateReservationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medialive.UpdateReservationInput, ...func(*medialive.Options)) *medialive.UpdateReservationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medialive.UpdateReservationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medialive.UpdateReservationInput, ...func(*medialive.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMedialiveClient creates a new instance of MedialiveClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMedialiveClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MedialiveClient {
	mock := &MedialiveClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
