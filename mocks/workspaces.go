// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	workspaces "github.com/aws/aws-sdk-go-v2/service/workspaces"
)

// WorkspacesClient is an autogenerated mock type for the WorkspacesClient type
type WorkspacesClient struct {
	mock.Mock
}

// AssociateConnectionAlias provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) AssociateConnectionAlias(ctx context.Context, params *workspaces.AssociateConnectionAliasInput, optFns ...func(*workspaces.Options)) (*workspaces.AssociateConnectionAliasOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateConnectionAlias")
	}

	var r0 *workspaces.AssociateConnectionAliasOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.AssociateConnectionAliasInput, ...func(*workspaces.Options)) (*workspaces.AssociateConnectionAliasOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.AssociateConnectionAliasInput, ...func(*workspaces.Options)) *workspaces.AssociateConnectionAliasOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.AssociateConnectionAliasOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.AssociateConnectionAliasInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateIpGroups provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) AssociateIpGroups(ctx context.Context, params *workspaces.AssociateIpGroupsInput, optFns ...func(*workspaces.Options)) (*workspaces.AssociateIpGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateIpGroups")
	}

	var r0 *workspaces.AssociateIpGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.AssociateIpGroupsInput, ...func(*workspaces.Options)) (*workspaces.AssociateIpGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.AssociateIpGroupsInput, ...func(*workspaces.Options)) *workspaces.AssociateIpGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.AssociateIpGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.AssociateIpGroupsInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateWorkspaceApplication provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) AssociateWorkspaceApplication(ctx context.Context, params *workspaces.AssociateWorkspaceApplicationInput, optFns ...func(*workspaces.Options)) (*workspaces.AssociateWorkspaceApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateWorkspaceApplication")
	}

	var r0 *workspaces.AssociateWorkspaceApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.AssociateWorkspaceApplicationInput, ...func(*workspaces.Options)) (*workspaces.AssociateWorkspaceApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.AssociateWorkspaceApplicationInput, ...func(*workspaces.Options)) *workspaces.AssociateWorkspaceApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.AssociateWorkspaceApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.AssociateWorkspaceApplicationInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthorizeIpRules provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) AuthorizeIpRules(ctx context.Context, params *workspaces.AuthorizeIpRulesInput, optFns ...func(*workspaces.Options)) (*workspaces.AuthorizeIpRulesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AuthorizeIpRules")
	}

	var r0 *workspaces.AuthorizeIpRulesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.AuthorizeIpRulesInput, ...func(*workspaces.Options)) (*workspaces.AuthorizeIpRulesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.AuthorizeIpRulesInput, ...func(*workspaces.Options)) *workspaces.AuthorizeIpRulesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.AuthorizeIpRulesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.AuthorizeIpRulesInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopyWorkspaceImage provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) CopyWorkspaceImage(ctx context.Context, params *workspaces.CopyWorkspaceImageInput, optFns ...func(*workspaces.Options)) (*workspaces.CopyWorkspaceImageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CopyWorkspaceImage")
	}

	var r0 *workspaces.CopyWorkspaceImageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.CopyWorkspaceImageInput, ...func(*workspaces.Options)) (*workspaces.CopyWorkspaceImageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.CopyWorkspaceImageInput, ...func(*workspaces.Options)) *workspaces.CopyWorkspaceImageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.CopyWorkspaceImageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.CopyWorkspaceImageInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConnectClientAddIn provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) CreateConnectClientAddIn(ctx context.Context, params *workspaces.CreateConnectClientAddInInput, optFns ...func(*workspaces.Options)) (*workspaces.CreateConnectClientAddInOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateConnectClientAddIn")
	}

	var r0 *workspaces.CreateConnectClientAddInOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.CreateConnectClientAddInInput, ...func(*workspaces.Options)) (*workspaces.CreateConnectClientAddInOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.CreateConnectClientAddInInput, ...func(*workspaces.Options)) *workspaces.CreateConnectClientAddInOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.CreateConnectClientAddInOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.CreateConnectClientAddInInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConnectionAlias provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) CreateConnectionAlias(ctx context.Context, params *workspaces.CreateConnectionAliasInput, optFns ...func(*workspaces.Options)) (*workspaces.CreateConnectionAliasOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateConnectionAlias")
	}

	var r0 *workspaces.CreateConnectionAliasOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.CreateConnectionAliasInput, ...func(*workspaces.Options)) (*workspaces.CreateConnectionAliasOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.CreateConnectionAliasInput, ...func(*workspaces.Options)) *workspaces.CreateConnectionAliasOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.CreateConnectionAliasOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.CreateConnectionAliasInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIpGroup provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) CreateIpGroup(ctx context.Context, params *workspaces.CreateIpGroupInput, optFns ...func(*workspaces.Options)) (*workspaces.CreateIpGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateIpGroup")
	}

	var r0 *workspaces.CreateIpGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.CreateIpGroupInput, ...func(*workspaces.Options)) (*workspaces.CreateIpGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.CreateIpGroupInput, ...func(*workspaces.Options)) *workspaces.CreateIpGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.CreateIpGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.CreateIpGroupInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateStandbyWorkspaces provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) CreateStandbyWorkspaces(ctx context.Context, params *workspaces.CreateStandbyWorkspacesInput, optFns ...func(*workspaces.Options)) (*workspaces.CreateStandbyWorkspacesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateStandbyWorkspaces")
	}

	var r0 *workspaces.CreateStandbyWorkspacesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.CreateStandbyWorkspacesInput, ...func(*workspaces.Options)) (*workspaces.CreateStandbyWorkspacesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.CreateStandbyWorkspacesInput, ...func(*workspaces.Options)) *workspaces.CreateStandbyWorkspacesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.CreateStandbyWorkspacesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.CreateStandbyWorkspacesInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTags provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) CreateTags(ctx context.Context, params *workspaces.CreateTagsInput, optFns ...func(*workspaces.Options)) (*workspaces.CreateTagsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTags")
	}

	var r0 *workspaces.CreateTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.CreateTagsInput, ...func(*workspaces.Options)) (*workspaces.CreateTagsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.CreateTagsInput, ...func(*workspaces.Options)) *workspaces.CreateTagsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.CreateTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.CreateTagsInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUpdatedWorkspaceImage provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) CreateUpdatedWorkspaceImage(ctx context.Context, params *workspaces.CreateUpdatedWorkspaceImageInput, optFns ...func(*workspaces.Options)) (*workspaces.CreateUpdatedWorkspaceImageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateUpdatedWorkspaceImage")
	}

	var r0 *workspaces.CreateUpdatedWorkspaceImageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.CreateUpdatedWorkspaceImageInput, ...func(*workspaces.Options)) (*workspaces.CreateUpdatedWorkspaceImageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.CreateUpdatedWorkspaceImageInput, ...func(*workspaces.Options)) *workspaces.CreateUpdatedWorkspaceImageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.CreateUpdatedWorkspaceImageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.CreateUpdatedWorkspaceImageInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWorkspaceBundle provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) CreateWorkspaceBundle(ctx context.Context, params *workspaces.CreateWorkspaceBundleInput, optFns ...func(*workspaces.Options)) (*workspaces.CreateWorkspaceBundleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateWorkspaceBundle")
	}

	var r0 *workspaces.CreateWorkspaceBundleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.CreateWorkspaceBundleInput, ...func(*workspaces.Options)) (*workspaces.CreateWorkspaceBundleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.CreateWorkspaceBundleInput, ...func(*workspaces.Options)) *workspaces.CreateWorkspaceBundleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.CreateWorkspaceBundleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.CreateWorkspaceBundleInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWorkspaceImage provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) CreateWorkspaceImage(ctx context.Context, params *workspaces.CreateWorkspaceImageInput, optFns ...func(*workspaces.Options)) (*workspaces.CreateWorkspaceImageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateWorkspaceImage")
	}

	var r0 *workspaces.CreateWorkspaceImageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.CreateWorkspaceImageInput, ...func(*workspaces.Options)) (*workspaces.CreateWorkspaceImageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.CreateWorkspaceImageInput, ...func(*workspaces.Options)) *workspaces.CreateWorkspaceImageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.CreateWorkspaceImageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.CreateWorkspaceImageInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWorkspaces provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) CreateWorkspaces(ctx context.Context, params *workspaces.CreateWorkspacesInput, optFns ...func(*workspaces.Options)) (*workspaces.CreateWorkspacesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateWorkspaces")
	}

	var r0 *workspaces.CreateWorkspacesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.CreateWorkspacesInput, ...func(*workspaces.Options)) (*workspaces.CreateWorkspacesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.CreateWorkspacesInput, ...func(*workspaces.Options)) *workspaces.CreateWorkspacesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.CreateWorkspacesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.CreateWorkspacesInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteClientBranding provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) DeleteClientBranding(ctx context.Context, params *workspaces.DeleteClientBrandingInput, optFns ...func(*workspaces.Options)) (*workspaces.DeleteClientBrandingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClientBranding")
	}

	var r0 *workspaces.DeleteClientBrandingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DeleteClientBrandingInput, ...func(*workspaces.Options)) (*workspaces.DeleteClientBrandingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DeleteClientBrandingInput, ...func(*workspaces.Options)) *workspaces.DeleteClientBrandingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.DeleteClientBrandingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.DeleteClientBrandingInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConnectClientAddIn provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) DeleteConnectClientAddIn(ctx context.Context, params *workspaces.DeleteConnectClientAddInInput, optFns ...func(*workspaces.Options)) (*workspaces.DeleteConnectClientAddInOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConnectClientAddIn")
	}

	var r0 *workspaces.DeleteConnectClientAddInOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DeleteConnectClientAddInInput, ...func(*workspaces.Options)) (*workspaces.DeleteConnectClientAddInOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DeleteConnectClientAddInInput, ...func(*workspaces.Options)) *workspaces.DeleteConnectClientAddInOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.DeleteConnectClientAddInOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.DeleteConnectClientAddInInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConnectionAlias provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) DeleteConnectionAlias(ctx context.Context, params *workspaces.DeleteConnectionAliasInput, optFns ...func(*workspaces.Options)) (*workspaces.DeleteConnectionAliasOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConnectionAlias")
	}

	var r0 *workspaces.DeleteConnectionAliasOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DeleteConnectionAliasInput, ...func(*workspaces.Options)) (*workspaces.DeleteConnectionAliasOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DeleteConnectionAliasInput, ...func(*workspaces.Options)) *workspaces.DeleteConnectionAliasOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.DeleteConnectionAliasOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.DeleteConnectionAliasInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIpGroup provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) DeleteIpGroup(ctx context.Context, params *workspaces.DeleteIpGroupInput, optFns ...func(*workspaces.Options)) (*workspaces.DeleteIpGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIpGroup")
	}

	var r0 *workspaces.DeleteIpGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DeleteIpGroupInput, ...func(*workspaces.Options)) (*workspaces.DeleteIpGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DeleteIpGroupInput, ...func(*workspaces.Options)) *workspaces.DeleteIpGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.DeleteIpGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.DeleteIpGroupInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTags provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) DeleteTags(ctx context.Context, params *workspaces.DeleteTagsInput, optFns ...func(*workspaces.Options)) (*workspaces.DeleteTagsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTags")
	}

	var r0 *workspaces.DeleteTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DeleteTagsInput, ...func(*workspaces.Options)) (*workspaces.DeleteTagsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DeleteTagsInput, ...func(*workspaces.Options)) *workspaces.DeleteTagsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.DeleteTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.DeleteTagsInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWorkspaceBundle provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) DeleteWorkspaceBundle(ctx context.Context, params *workspaces.DeleteWorkspaceBundleInput, optFns ...func(*workspaces.Options)) (*workspaces.DeleteWorkspaceBundleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkspaceBundle")
	}

	var r0 *workspaces.DeleteWorkspaceBundleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DeleteWorkspaceBundleInput, ...func(*workspaces.Options)) (*workspaces.DeleteWorkspaceBundleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DeleteWorkspaceBundleInput, ...func(*workspaces.Options)) *workspaces.DeleteWorkspaceBundleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.DeleteWorkspaceBundleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.DeleteWorkspaceBundleInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWorkspaceImage provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) DeleteWorkspaceImage(ctx context.Context, params *workspaces.DeleteWorkspaceImageInput, optFns ...func(*workspaces.Options)) (*workspaces.DeleteWorkspaceImageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkspaceImage")
	}

	var r0 *workspaces.DeleteWorkspaceImageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DeleteWorkspaceImageInput, ...func(*workspaces.Options)) (*workspaces.DeleteWorkspaceImageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DeleteWorkspaceImageInput, ...func(*workspaces.Options)) *workspaces.DeleteWorkspaceImageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.DeleteWorkspaceImageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.DeleteWorkspaceImageInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeployWorkspaceApplications provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) DeployWorkspaceApplications(ctx context.Context, params *workspaces.DeployWorkspaceApplicationsInput, optFns ...func(*workspaces.Options)) (*workspaces.DeployWorkspaceApplicationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeployWorkspaceApplications")
	}

	var r0 *workspaces.DeployWorkspaceApplicationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DeployWorkspaceApplicationsInput, ...func(*workspaces.Options)) (*workspaces.DeployWorkspaceApplicationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DeployWorkspaceApplicationsInput, ...func(*workspaces.Options)) *workspaces.DeployWorkspaceApplicationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.DeployWorkspaceApplicationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.DeployWorkspaceApplicationsInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeregisterWorkspaceDirectory provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) DeregisterWorkspaceDirectory(ctx context.Context, params *workspaces.DeregisterWorkspaceDirectoryInput, optFns ...func(*workspaces.Options)) (*workspaces.DeregisterWorkspaceDirectoryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeregisterWorkspaceDirectory")
	}

	var r0 *workspaces.DeregisterWorkspaceDirectoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DeregisterWorkspaceDirectoryInput, ...func(*workspaces.Options)) (*workspaces.DeregisterWorkspaceDirectoryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DeregisterWorkspaceDirectoryInput, ...func(*workspaces.Options)) *workspaces.DeregisterWorkspaceDirectoryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.DeregisterWorkspaceDirectoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.DeregisterWorkspaceDirectoryInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAccount provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) DescribeAccount(ctx context.Context, params *workspaces.DescribeAccountInput, optFns ...func(*workspaces.Options)) (*workspaces.DescribeAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAccount")
	}

	var r0 *workspaces.DescribeAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DescribeAccountInput, ...func(*workspaces.Options)) (*workspaces.DescribeAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DescribeAccountInput, ...func(*workspaces.Options)) *workspaces.DescribeAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.DescribeAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.DescribeAccountInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAccountModifications provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) DescribeAccountModifications(ctx context.Context, params *workspaces.DescribeAccountModificationsInput, optFns ...func(*workspaces.Options)) (*workspaces.DescribeAccountModificationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAccountModifications")
	}

	var r0 *workspaces.DescribeAccountModificationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DescribeAccountModificationsInput, ...func(*workspaces.Options)) (*workspaces.DescribeAccountModificationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DescribeAccountModificationsInput, ...func(*workspaces.Options)) *workspaces.DescribeAccountModificationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.DescribeAccountModificationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.DescribeAccountModificationsInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeApplicationAssociations provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) DescribeApplicationAssociations(ctx context.Context, params *workspaces.DescribeApplicationAssociationsInput, optFns ...func(*workspaces.Options)) (*workspaces.DescribeApplicationAssociationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeApplicationAssociations")
	}

	var r0 *workspaces.DescribeApplicationAssociationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DescribeApplicationAssociationsInput, ...func(*workspaces.Options)) (*workspaces.DescribeApplicationAssociationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DescribeApplicationAssociationsInput, ...func(*workspaces.Options)) *workspaces.DescribeApplicationAssociationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.DescribeApplicationAssociationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.DescribeApplicationAssociationsInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeApplications provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) DescribeApplications(ctx context.Context, params *workspaces.DescribeApplicationsInput, optFns ...func(*workspaces.Options)) (*workspaces.DescribeApplicationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeApplications")
	}

	var r0 *workspaces.DescribeApplicationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DescribeApplicationsInput, ...func(*workspaces.Options)) (*workspaces.DescribeApplicationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DescribeApplicationsInput, ...func(*workspaces.Options)) *workspaces.DescribeApplicationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.DescribeApplicationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.DescribeApplicationsInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeBundleAssociations provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) DescribeBundleAssociations(ctx context.Context, params *workspaces.DescribeBundleAssociationsInput, optFns ...func(*workspaces.Options)) (*workspaces.DescribeBundleAssociationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeBundleAssociations")
	}

	var r0 *workspaces.DescribeBundleAssociationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DescribeBundleAssociationsInput, ...func(*workspaces.Options)) (*workspaces.DescribeBundleAssociationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DescribeBundleAssociationsInput, ...func(*workspaces.Options)) *workspaces.DescribeBundleAssociationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.DescribeBundleAssociationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.DescribeBundleAssociationsInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeClientBranding provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) DescribeClientBranding(ctx context.Context, params *workspaces.DescribeClientBrandingInput, optFns ...func(*workspaces.Options)) (*workspaces.DescribeClientBrandingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeClientBranding")
	}

	var r0 *workspaces.DescribeClientBrandingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DescribeClientBrandingInput, ...func(*workspaces.Options)) (*workspaces.DescribeClientBrandingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DescribeClientBrandingInput, ...func(*workspaces.Options)) *workspaces.DescribeClientBrandingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.DescribeClientBrandingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.DescribeClientBrandingInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeClientProperties provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) DescribeClientProperties(ctx context.Context, params *workspaces.DescribeClientPropertiesInput, optFns ...func(*workspaces.Options)) (*workspaces.DescribeClientPropertiesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeClientProperties")
	}

	var r0 *workspaces.DescribeClientPropertiesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DescribeClientPropertiesInput, ...func(*workspaces.Options)) (*workspaces.DescribeClientPropertiesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DescribeClientPropertiesInput, ...func(*workspaces.Options)) *workspaces.DescribeClientPropertiesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.DescribeClientPropertiesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.DescribeClientPropertiesInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeConnectClientAddIns provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) DescribeConnectClientAddIns(ctx context.Context, params *workspaces.DescribeConnectClientAddInsInput, optFns ...func(*workspaces.Options)) (*workspaces.DescribeConnectClientAddInsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeConnectClientAddIns")
	}

	var r0 *workspaces.DescribeConnectClientAddInsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DescribeConnectClientAddInsInput, ...func(*workspaces.Options)) (*workspaces.DescribeConnectClientAddInsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DescribeConnectClientAddInsInput, ...func(*workspaces.Options)) *workspaces.DescribeConnectClientAddInsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.DescribeConnectClientAddInsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.DescribeConnectClientAddInsInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeConnectionAliasPermissions provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) DescribeConnectionAliasPermissions(ctx context.Context, params *workspaces.DescribeConnectionAliasPermissionsInput, optFns ...func(*workspaces.Options)) (*workspaces.DescribeConnectionAliasPermissionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeConnectionAliasPermissions")
	}

	var r0 *workspaces.DescribeConnectionAliasPermissionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DescribeConnectionAliasPermissionsInput, ...func(*workspaces.Options)) (*workspaces.DescribeConnectionAliasPermissionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DescribeConnectionAliasPermissionsInput, ...func(*workspaces.Options)) *workspaces.DescribeConnectionAliasPermissionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.DescribeConnectionAliasPermissionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.DescribeConnectionAliasPermissionsInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeConnectionAliases provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) DescribeConnectionAliases(ctx context.Context, params *workspaces.DescribeConnectionAliasesInput, optFns ...func(*workspaces.Options)) (*workspaces.DescribeConnectionAliasesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeConnectionAliases")
	}

	var r0 *workspaces.DescribeConnectionAliasesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DescribeConnectionAliasesInput, ...func(*workspaces.Options)) (*workspaces.DescribeConnectionAliasesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DescribeConnectionAliasesInput, ...func(*workspaces.Options)) *workspaces.DescribeConnectionAliasesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.DescribeConnectionAliasesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.DescribeConnectionAliasesInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeImageAssociations provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) DescribeImageAssociations(ctx context.Context, params *workspaces.DescribeImageAssociationsInput, optFns ...func(*workspaces.Options)) (*workspaces.DescribeImageAssociationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeImageAssociations")
	}

	var r0 *workspaces.DescribeImageAssociationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DescribeImageAssociationsInput, ...func(*workspaces.Options)) (*workspaces.DescribeImageAssociationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DescribeImageAssociationsInput, ...func(*workspaces.Options)) *workspaces.DescribeImageAssociationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.DescribeImageAssociationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.DescribeImageAssociationsInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeIpGroups provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) DescribeIpGroups(ctx context.Context, params *workspaces.DescribeIpGroupsInput, optFns ...func(*workspaces.Options)) (*workspaces.DescribeIpGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeIpGroups")
	}

	var r0 *workspaces.DescribeIpGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DescribeIpGroupsInput, ...func(*workspaces.Options)) (*workspaces.DescribeIpGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DescribeIpGroupsInput, ...func(*workspaces.Options)) *workspaces.DescribeIpGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.DescribeIpGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.DescribeIpGroupsInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTags provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) DescribeTags(ctx context.Context, params *workspaces.DescribeTagsInput, optFns ...func(*workspaces.Options)) (*workspaces.DescribeTagsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeTags")
	}

	var r0 *workspaces.DescribeTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DescribeTagsInput, ...func(*workspaces.Options)) (*workspaces.DescribeTagsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DescribeTagsInput, ...func(*workspaces.Options)) *workspaces.DescribeTagsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.DescribeTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.DescribeTagsInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeWorkspaceAssociations provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) DescribeWorkspaceAssociations(ctx context.Context, params *workspaces.DescribeWorkspaceAssociationsInput, optFns ...func(*workspaces.Options)) (*workspaces.DescribeWorkspaceAssociationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeWorkspaceAssociations")
	}

	var r0 *workspaces.DescribeWorkspaceAssociationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DescribeWorkspaceAssociationsInput, ...func(*workspaces.Options)) (*workspaces.DescribeWorkspaceAssociationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DescribeWorkspaceAssociationsInput, ...func(*workspaces.Options)) *workspaces.DescribeWorkspaceAssociationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.DescribeWorkspaceAssociationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.DescribeWorkspaceAssociationsInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeWorkspaceBundles provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) DescribeWorkspaceBundles(ctx context.Context, params *workspaces.DescribeWorkspaceBundlesInput, optFns ...func(*workspaces.Options)) (*workspaces.DescribeWorkspaceBundlesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeWorkspaceBundles")
	}

	var r0 *workspaces.DescribeWorkspaceBundlesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DescribeWorkspaceBundlesInput, ...func(*workspaces.Options)) (*workspaces.DescribeWorkspaceBundlesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DescribeWorkspaceBundlesInput, ...func(*workspaces.Options)) *workspaces.DescribeWorkspaceBundlesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.DescribeWorkspaceBundlesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.DescribeWorkspaceBundlesInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeWorkspaceDirectories provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) DescribeWorkspaceDirectories(ctx context.Context, params *workspaces.DescribeWorkspaceDirectoriesInput, optFns ...func(*workspaces.Options)) (*workspaces.DescribeWorkspaceDirectoriesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeWorkspaceDirectories")
	}

	var r0 *workspaces.DescribeWorkspaceDirectoriesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DescribeWorkspaceDirectoriesInput, ...func(*workspaces.Options)) (*workspaces.DescribeWorkspaceDirectoriesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DescribeWorkspaceDirectoriesInput, ...func(*workspaces.Options)) *workspaces.DescribeWorkspaceDirectoriesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.DescribeWorkspaceDirectoriesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.DescribeWorkspaceDirectoriesInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeWorkspaceImagePermissions provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) DescribeWorkspaceImagePermissions(ctx context.Context, params *workspaces.DescribeWorkspaceImagePermissionsInput, optFns ...func(*workspaces.Options)) (*workspaces.DescribeWorkspaceImagePermissionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeWorkspaceImagePermissions")
	}

	var r0 *workspaces.DescribeWorkspaceImagePermissionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DescribeWorkspaceImagePermissionsInput, ...func(*workspaces.Options)) (*workspaces.DescribeWorkspaceImagePermissionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DescribeWorkspaceImagePermissionsInput, ...func(*workspaces.Options)) *workspaces.DescribeWorkspaceImagePermissionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.DescribeWorkspaceImagePermissionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.DescribeWorkspaceImagePermissionsInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeWorkspaceImages provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) DescribeWorkspaceImages(ctx context.Context, params *workspaces.DescribeWorkspaceImagesInput, optFns ...func(*workspaces.Options)) (*workspaces.DescribeWorkspaceImagesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeWorkspaceImages")
	}

	var r0 *workspaces.DescribeWorkspaceImagesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DescribeWorkspaceImagesInput, ...func(*workspaces.Options)) (*workspaces.DescribeWorkspaceImagesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DescribeWorkspaceImagesInput, ...func(*workspaces.Options)) *workspaces.DescribeWorkspaceImagesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.DescribeWorkspaceImagesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.DescribeWorkspaceImagesInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeWorkspaceSnapshots provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) DescribeWorkspaceSnapshots(ctx context.Context, params *workspaces.DescribeWorkspaceSnapshotsInput, optFns ...func(*workspaces.Options)) (*workspaces.DescribeWorkspaceSnapshotsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeWorkspaceSnapshots")
	}

	var r0 *workspaces.DescribeWorkspaceSnapshotsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DescribeWorkspaceSnapshotsInput, ...func(*workspaces.Options)) (*workspaces.DescribeWorkspaceSnapshotsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DescribeWorkspaceSnapshotsInput, ...func(*workspaces.Options)) *workspaces.DescribeWorkspaceSnapshotsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.DescribeWorkspaceSnapshotsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.DescribeWorkspaceSnapshotsInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeWorkspaces provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) DescribeWorkspaces(ctx context.Context, params *workspaces.DescribeWorkspacesInput, optFns ...func(*workspaces.Options)) (*workspaces.DescribeWorkspacesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeWorkspaces")
	}

	var r0 *workspaces.DescribeWorkspacesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DescribeWorkspacesInput, ...func(*workspaces.Options)) (*workspaces.DescribeWorkspacesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DescribeWorkspacesInput, ...func(*workspaces.Options)) *workspaces.DescribeWorkspacesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.DescribeWorkspacesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.DescribeWorkspacesInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeWorkspacesConnectionStatus provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) DescribeWorkspacesConnectionStatus(ctx context.Context, params *workspaces.DescribeWorkspacesConnectionStatusInput, optFns ...func(*workspaces.Options)) (*workspaces.DescribeWorkspacesConnectionStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeWorkspacesConnectionStatus")
	}

	var r0 *workspaces.DescribeWorkspacesConnectionStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DescribeWorkspacesConnectionStatusInput, ...func(*workspaces.Options)) (*workspaces.DescribeWorkspacesConnectionStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DescribeWorkspacesConnectionStatusInput, ...func(*workspaces.Options)) *workspaces.DescribeWorkspacesConnectionStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.DescribeWorkspacesConnectionStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.DescribeWorkspacesConnectionStatusInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateConnectionAlias provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) DisassociateConnectionAlias(ctx context.Context, params *workspaces.DisassociateConnectionAliasInput, optFns ...func(*workspaces.Options)) (*workspaces.DisassociateConnectionAliasOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateConnectionAlias")
	}

	var r0 *workspaces.DisassociateConnectionAliasOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DisassociateConnectionAliasInput, ...func(*workspaces.Options)) (*workspaces.DisassociateConnectionAliasOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DisassociateConnectionAliasInput, ...func(*workspaces.Options)) *workspaces.DisassociateConnectionAliasOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.DisassociateConnectionAliasOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.DisassociateConnectionAliasInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateIpGroups provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) DisassociateIpGroups(ctx context.Context, params *workspaces.DisassociateIpGroupsInput, optFns ...func(*workspaces.Options)) (*workspaces.DisassociateIpGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateIpGroups")
	}

	var r0 *workspaces.DisassociateIpGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DisassociateIpGroupsInput, ...func(*workspaces.Options)) (*workspaces.DisassociateIpGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DisassociateIpGroupsInput, ...func(*workspaces.Options)) *workspaces.DisassociateIpGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.DisassociateIpGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.DisassociateIpGroupsInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateWorkspaceApplication provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) DisassociateWorkspaceApplication(ctx context.Context, params *workspaces.DisassociateWorkspaceApplicationInput, optFns ...func(*workspaces.Options)) (*workspaces.DisassociateWorkspaceApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateWorkspaceApplication")
	}

	var r0 *workspaces.DisassociateWorkspaceApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DisassociateWorkspaceApplicationInput, ...func(*workspaces.Options)) (*workspaces.DisassociateWorkspaceApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.DisassociateWorkspaceApplicationInput, ...func(*workspaces.Options)) *workspaces.DisassociateWorkspaceApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.DisassociateWorkspaceApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.DisassociateWorkspaceApplicationInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportClientBranding provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) ImportClientBranding(ctx context.Context, params *workspaces.ImportClientBrandingInput, optFns ...func(*workspaces.Options)) (*workspaces.ImportClientBrandingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ImportClientBranding")
	}

	var r0 *workspaces.ImportClientBrandingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.ImportClientBrandingInput, ...func(*workspaces.Options)) (*workspaces.ImportClientBrandingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.ImportClientBrandingInput, ...func(*workspaces.Options)) *workspaces.ImportClientBrandingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.ImportClientBrandingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.ImportClientBrandingInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportWorkspaceImage provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) ImportWorkspaceImage(ctx context.Context, params *workspaces.ImportWorkspaceImageInput, optFns ...func(*workspaces.Options)) (*workspaces.ImportWorkspaceImageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ImportWorkspaceImage")
	}

	var r0 *workspaces.ImportWorkspaceImageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.ImportWorkspaceImageInput, ...func(*workspaces.Options)) (*workspaces.ImportWorkspaceImageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.ImportWorkspaceImageInput, ...func(*workspaces.Options)) *workspaces.ImportWorkspaceImageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.ImportWorkspaceImageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.ImportWorkspaceImageInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAvailableManagementCidrRanges provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) ListAvailableManagementCidrRanges(ctx context.Context, params *workspaces.ListAvailableManagementCidrRangesInput, optFns ...func(*workspaces.Options)) (*workspaces.ListAvailableManagementCidrRangesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAvailableManagementCidrRanges")
	}

	var r0 *workspaces.ListAvailableManagementCidrRangesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.ListAvailableManagementCidrRangesInput, ...func(*workspaces.Options)) (*workspaces.ListAvailableManagementCidrRangesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.ListAvailableManagementCidrRangesInput, ...func(*workspaces.Options)) *workspaces.ListAvailableManagementCidrRangesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.ListAvailableManagementCidrRangesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.ListAvailableManagementCidrRangesInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MigrateWorkspace provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) MigrateWorkspace(ctx context.Context, params *workspaces.MigrateWorkspaceInput, optFns ...func(*workspaces.Options)) (*workspaces.MigrateWorkspaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for MigrateWorkspace")
	}

	var r0 *workspaces.MigrateWorkspaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.MigrateWorkspaceInput, ...func(*workspaces.Options)) (*workspaces.MigrateWorkspaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.MigrateWorkspaceInput, ...func(*workspaces.Options)) *workspaces.MigrateWorkspaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.MigrateWorkspaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.MigrateWorkspaceInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyAccount provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) ModifyAccount(ctx context.Context, params *workspaces.ModifyAccountInput, optFns ...func(*workspaces.Options)) (*workspaces.ModifyAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyAccount")
	}

	var r0 *workspaces.ModifyAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.ModifyAccountInput, ...func(*workspaces.Options)) (*workspaces.ModifyAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.ModifyAccountInput, ...func(*workspaces.Options)) *workspaces.ModifyAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.ModifyAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.ModifyAccountInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyCertificateBasedAuthProperties provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) ModifyCertificateBasedAuthProperties(ctx context.Context, params *workspaces.ModifyCertificateBasedAuthPropertiesInput, optFns ...func(*workspaces.Options)) (*workspaces.ModifyCertificateBasedAuthPropertiesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyCertificateBasedAuthProperties")
	}

	var r0 *workspaces.ModifyCertificateBasedAuthPropertiesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.ModifyCertificateBasedAuthPropertiesInput, ...func(*workspaces.Options)) (*workspaces.ModifyCertificateBasedAuthPropertiesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.ModifyCertificateBasedAuthPropertiesInput, ...func(*workspaces.Options)) *workspaces.ModifyCertificateBasedAuthPropertiesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.ModifyCertificateBasedAuthPropertiesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.ModifyCertificateBasedAuthPropertiesInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyClientProperties provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) ModifyClientProperties(ctx context.Context, params *workspaces.ModifyClientPropertiesInput, optFns ...func(*workspaces.Options)) (*workspaces.ModifyClientPropertiesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyClientProperties")
	}

	var r0 *workspaces.ModifyClientPropertiesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.ModifyClientPropertiesInput, ...func(*workspaces.Options)) (*workspaces.ModifyClientPropertiesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.ModifyClientPropertiesInput, ...func(*workspaces.Options)) *workspaces.ModifyClientPropertiesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.ModifyClientPropertiesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.ModifyClientPropertiesInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifySamlProperties provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) ModifySamlProperties(ctx context.Context, params *workspaces.ModifySamlPropertiesInput, optFns ...func(*workspaces.Options)) (*workspaces.ModifySamlPropertiesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifySamlProperties")
	}

	var r0 *workspaces.ModifySamlPropertiesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.ModifySamlPropertiesInput, ...func(*workspaces.Options)) (*workspaces.ModifySamlPropertiesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.ModifySamlPropertiesInput, ...func(*workspaces.Options)) *workspaces.ModifySamlPropertiesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.ModifySamlPropertiesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.ModifySamlPropertiesInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifySelfservicePermissions provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) ModifySelfservicePermissions(ctx context.Context, params *workspaces.ModifySelfservicePermissionsInput, optFns ...func(*workspaces.Options)) (*workspaces.ModifySelfservicePermissionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifySelfservicePermissions")
	}

	var r0 *workspaces.ModifySelfservicePermissionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.ModifySelfservicePermissionsInput, ...func(*workspaces.Options)) (*workspaces.ModifySelfservicePermissionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.ModifySelfservicePermissionsInput, ...func(*workspaces.Options)) *workspaces.ModifySelfservicePermissionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.ModifySelfservicePermissionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.ModifySelfservicePermissionsInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyWorkspaceAccessProperties provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) ModifyWorkspaceAccessProperties(ctx context.Context, params *workspaces.ModifyWorkspaceAccessPropertiesInput, optFns ...func(*workspaces.Options)) (*workspaces.ModifyWorkspaceAccessPropertiesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyWorkspaceAccessProperties")
	}

	var r0 *workspaces.ModifyWorkspaceAccessPropertiesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.ModifyWorkspaceAccessPropertiesInput, ...func(*workspaces.Options)) (*workspaces.ModifyWorkspaceAccessPropertiesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.ModifyWorkspaceAccessPropertiesInput, ...func(*workspaces.Options)) *workspaces.ModifyWorkspaceAccessPropertiesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.ModifyWorkspaceAccessPropertiesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.ModifyWorkspaceAccessPropertiesInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyWorkspaceCreationProperties provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) ModifyWorkspaceCreationProperties(ctx context.Context, params *workspaces.ModifyWorkspaceCreationPropertiesInput, optFns ...func(*workspaces.Options)) (*workspaces.ModifyWorkspaceCreationPropertiesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyWorkspaceCreationProperties")
	}

	var r0 *workspaces.ModifyWorkspaceCreationPropertiesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.ModifyWorkspaceCreationPropertiesInput, ...func(*workspaces.Options)) (*workspaces.ModifyWorkspaceCreationPropertiesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.ModifyWorkspaceCreationPropertiesInput, ...func(*workspaces.Options)) *workspaces.ModifyWorkspaceCreationPropertiesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.ModifyWorkspaceCreationPropertiesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.ModifyWorkspaceCreationPropertiesInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyWorkspaceProperties provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) ModifyWorkspaceProperties(ctx context.Context, params *workspaces.ModifyWorkspacePropertiesInput, optFns ...func(*workspaces.Options)) (*workspaces.ModifyWorkspacePropertiesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyWorkspaceProperties")
	}

	var r0 *workspaces.ModifyWorkspacePropertiesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.ModifyWorkspacePropertiesInput, ...func(*workspaces.Options)) (*workspaces.ModifyWorkspacePropertiesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.ModifyWorkspacePropertiesInput, ...func(*workspaces.Options)) *workspaces.ModifyWorkspacePropertiesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.ModifyWorkspacePropertiesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.ModifyWorkspacePropertiesInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyWorkspaceState provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) ModifyWorkspaceState(ctx context.Context, params *workspaces.ModifyWorkspaceStateInput, optFns ...func(*workspaces.Options)) (*workspaces.ModifyWorkspaceStateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyWorkspaceState")
	}

	var r0 *workspaces.ModifyWorkspaceStateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.ModifyWorkspaceStateInput, ...func(*workspaces.Options)) (*workspaces.ModifyWorkspaceStateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.ModifyWorkspaceStateInput, ...func(*workspaces.Options)) *workspaces.ModifyWorkspaceStateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.ModifyWorkspaceStateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.ModifyWorkspaceStateInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *WorkspacesClient) Options() workspaces.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 workspaces.Options
	if rf, ok := ret.Get(0).(func() workspaces.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(workspaces.Options)
	}

	return r0
}

// RebootWorkspaces provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) RebootWorkspaces(ctx context.Context, params *workspaces.RebootWorkspacesInput, optFns ...func(*workspaces.Options)) (*workspaces.RebootWorkspacesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RebootWorkspaces")
	}

	var r0 *workspaces.RebootWorkspacesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.RebootWorkspacesInput, ...func(*workspaces.Options)) (*workspaces.RebootWorkspacesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.RebootWorkspacesInput, ...func(*workspaces.Options)) *workspaces.RebootWorkspacesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.RebootWorkspacesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.RebootWorkspacesInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RebuildWorkspaces provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) RebuildWorkspaces(ctx context.Context, params *workspaces.RebuildWorkspacesInput, optFns ...func(*workspaces.Options)) (*workspaces.RebuildWorkspacesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RebuildWorkspaces")
	}

	var r0 *workspaces.RebuildWorkspacesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.RebuildWorkspacesInput, ...func(*workspaces.Options)) (*workspaces.RebuildWorkspacesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.RebuildWorkspacesInput, ...func(*workspaces.Options)) *workspaces.RebuildWorkspacesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.RebuildWorkspacesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.RebuildWorkspacesInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterWorkspaceDirectory provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) RegisterWorkspaceDirectory(ctx context.Context, params *workspaces.RegisterWorkspaceDirectoryInput, optFns ...func(*workspaces.Options)) (*workspaces.RegisterWorkspaceDirectoryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterWorkspaceDirectory")
	}

	var r0 *workspaces.RegisterWorkspaceDirectoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.RegisterWorkspaceDirectoryInput, ...func(*workspaces.Options)) (*workspaces.RegisterWorkspaceDirectoryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.RegisterWorkspaceDirectoryInput, ...func(*workspaces.Options)) *workspaces.RegisterWorkspaceDirectoryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.RegisterWorkspaceDirectoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.RegisterWorkspaceDirectoryInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestoreWorkspace provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) RestoreWorkspace(ctx context.Context, params *workspaces.RestoreWorkspaceInput, optFns ...func(*workspaces.Options)) (*workspaces.RestoreWorkspaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RestoreWorkspace")
	}

	var r0 *workspaces.RestoreWorkspaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.RestoreWorkspaceInput, ...func(*workspaces.Options)) (*workspaces.RestoreWorkspaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.RestoreWorkspaceInput, ...func(*workspaces.Options)) *workspaces.RestoreWorkspaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.RestoreWorkspaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.RestoreWorkspaceInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevokeIpRules provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) RevokeIpRules(ctx context.Context, params *workspaces.RevokeIpRulesInput, optFns ...func(*workspaces.Options)) (*workspaces.RevokeIpRulesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RevokeIpRules")
	}

	var r0 *workspaces.RevokeIpRulesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.RevokeIpRulesInput, ...func(*workspaces.Options)) (*workspaces.RevokeIpRulesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.RevokeIpRulesInput, ...func(*workspaces.Options)) *workspaces.RevokeIpRulesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.RevokeIpRulesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.RevokeIpRulesInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartWorkspaces provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) StartWorkspaces(ctx context.Context, params *workspaces.StartWorkspacesInput, optFns ...func(*workspaces.Options)) (*workspaces.StartWorkspacesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartWorkspaces")
	}

	var r0 *workspaces.StartWorkspacesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.StartWorkspacesInput, ...func(*workspaces.Options)) (*workspaces.StartWorkspacesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.StartWorkspacesInput, ...func(*workspaces.Options)) *workspaces.StartWorkspacesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.StartWorkspacesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.StartWorkspacesInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopWorkspaces provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) StopWorkspaces(ctx context.Context, params *workspaces.StopWorkspacesInput, optFns ...func(*workspaces.Options)) (*workspaces.StopWorkspacesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopWorkspaces")
	}

	var r0 *workspaces.StopWorkspacesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.StopWorkspacesInput, ...func(*workspaces.Options)) (*workspaces.StopWorkspacesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.StopWorkspacesInput, ...func(*workspaces.Options)) *workspaces.StopWorkspacesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.StopWorkspacesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.StopWorkspacesInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TerminateWorkspaces provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) TerminateWorkspaces(ctx context.Context, params *workspaces.TerminateWorkspacesInput, optFns ...func(*workspaces.Options)) (*workspaces.TerminateWorkspacesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TerminateWorkspaces")
	}

	var r0 *workspaces.TerminateWorkspacesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.TerminateWorkspacesInput, ...func(*workspaces.Options)) (*workspaces.TerminateWorkspacesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.TerminateWorkspacesInput, ...func(*workspaces.Options)) *workspaces.TerminateWorkspacesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.TerminateWorkspacesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.TerminateWorkspacesInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConnectClientAddIn provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) UpdateConnectClientAddIn(ctx context.Context, params *workspaces.UpdateConnectClientAddInInput, optFns ...func(*workspaces.Options)) (*workspaces.UpdateConnectClientAddInOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConnectClientAddIn")
	}

	var r0 *workspaces.UpdateConnectClientAddInOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.UpdateConnectClientAddInInput, ...func(*workspaces.Options)) (*workspaces.UpdateConnectClientAddInOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.UpdateConnectClientAddInInput, ...func(*workspaces.Options)) *workspaces.UpdateConnectClientAddInOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.UpdateConnectClientAddInOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.UpdateConnectClientAddInInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConnectionAliasPermission provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) UpdateConnectionAliasPermission(ctx context.Context, params *workspaces.UpdateConnectionAliasPermissionInput, optFns ...func(*workspaces.Options)) (*workspaces.UpdateConnectionAliasPermissionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConnectionAliasPermission")
	}

	var r0 *workspaces.UpdateConnectionAliasPermissionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.UpdateConnectionAliasPermissionInput, ...func(*workspaces.Options)) (*workspaces.UpdateConnectionAliasPermissionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.UpdateConnectionAliasPermissionInput, ...func(*workspaces.Options)) *workspaces.UpdateConnectionAliasPermissionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.UpdateConnectionAliasPermissionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.UpdateConnectionAliasPermissionInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRulesOfIpGroup provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) UpdateRulesOfIpGroup(ctx context.Context, params *workspaces.UpdateRulesOfIpGroupInput, optFns ...func(*workspaces.Options)) (*workspaces.UpdateRulesOfIpGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRulesOfIpGroup")
	}

	var r0 *workspaces.UpdateRulesOfIpGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.UpdateRulesOfIpGroupInput, ...func(*workspaces.Options)) (*workspaces.UpdateRulesOfIpGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.UpdateRulesOfIpGroupInput, ...func(*workspaces.Options)) *workspaces.UpdateRulesOfIpGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.UpdateRulesOfIpGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.UpdateRulesOfIpGroupInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWorkspaceBundle provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) UpdateWorkspaceBundle(ctx context.Context, params *workspaces.UpdateWorkspaceBundleInput, optFns ...func(*workspaces.Options)) (*workspaces.UpdateWorkspaceBundleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWorkspaceBundle")
	}

	var r0 *workspaces.UpdateWorkspaceBundleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.UpdateWorkspaceBundleInput, ...func(*workspaces.Options)) (*workspaces.UpdateWorkspaceBundleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.UpdateWorkspaceBundleInput, ...func(*workspaces.Options)) *workspaces.UpdateWorkspaceBundleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.UpdateWorkspaceBundleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.UpdateWorkspaceBundleInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWorkspaceImagePermission provides a mock function with given fields: ctx, params, optFns
func (_m *WorkspacesClient) UpdateWorkspaceImagePermission(ctx context.Context, params *workspaces.UpdateWorkspaceImagePermissionInput, optFns ...func(*workspaces.Options)) (*workspaces.UpdateWorkspaceImagePermissionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWorkspaceImagePermission")
	}

	var r0 *workspaces.UpdateWorkspaceImagePermissionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.UpdateWorkspaceImagePermissionInput, ...func(*workspaces.Options)) (*workspaces.UpdateWorkspaceImagePermissionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspaces.UpdateWorkspaceImagePermissionInput, ...func(*workspaces.Options)) *workspaces.UpdateWorkspaceImagePermissionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspaces.UpdateWorkspaceImagePermissionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspaces.UpdateWorkspaceImagePermissionInput, ...func(*workspaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWorkspacesClient creates a new instance of WorkspacesClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWorkspacesClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *WorkspacesClient {
	mock := &WorkspacesClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
