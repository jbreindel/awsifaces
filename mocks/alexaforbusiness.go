// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	alexaforbusiness "github.com/aws/aws-sdk-go-v2/service/alexaforbusiness"

	mock "github.com/stretchr/testify/mock"
)

// AlexaforbusinessClient is an autogenerated mock type for the AlexaforbusinessClient type
type AlexaforbusinessClient struct {
	mock.Mock
}

// ApproveSkill provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) ApproveSkill(ctx context.Context, params *alexaforbusiness.ApproveSkillInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.ApproveSkillOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ApproveSkill")
	}

	var r0 *alexaforbusiness.ApproveSkillOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.ApproveSkillInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.ApproveSkillOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.ApproveSkillInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.ApproveSkillOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.ApproveSkillOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.ApproveSkillInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateContactWithAddressBook provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) AssociateContactWithAddressBook(ctx context.Context, params *alexaforbusiness.AssociateContactWithAddressBookInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.AssociateContactWithAddressBookOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateContactWithAddressBook")
	}

	var r0 *alexaforbusiness.AssociateContactWithAddressBookOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.AssociateContactWithAddressBookInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.AssociateContactWithAddressBookOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.AssociateContactWithAddressBookInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.AssociateContactWithAddressBookOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.AssociateContactWithAddressBookOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.AssociateContactWithAddressBookInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateDeviceWithNetworkProfile provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) AssociateDeviceWithNetworkProfile(ctx context.Context, params *alexaforbusiness.AssociateDeviceWithNetworkProfileInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.AssociateDeviceWithNetworkProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateDeviceWithNetworkProfile")
	}

	var r0 *alexaforbusiness.AssociateDeviceWithNetworkProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.AssociateDeviceWithNetworkProfileInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.AssociateDeviceWithNetworkProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.AssociateDeviceWithNetworkProfileInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.AssociateDeviceWithNetworkProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.AssociateDeviceWithNetworkProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.AssociateDeviceWithNetworkProfileInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateDeviceWithRoom provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) AssociateDeviceWithRoom(ctx context.Context, params *alexaforbusiness.AssociateDeviceWithRoomInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.AssociateDeviceWithRoomOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateDeviceWithRoom")
	}

	var r0 *alexaforbusiness.AssociateDeviceWithRoomOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.AssociateDeviceWithRoomInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.AssociateDeviceWithRoomOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.AssociateDeviceWithRoomInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.AssociateDeviceWithRoomOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.AssociateDeviceWithRoomOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.AssociateDeviceWithRoomInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateSkillGroupWithRoom provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) AssociateSkillGroupWithRoom(ctx context.Context, params *alexaforbusiness.AssociateSkillGroupWithRoomInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.AssociateSkillGroupWithRoomOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateSkillGroupWithRoom")
	}

	var r0 *alexaforbusiness.AssociateSkillGroupWithRoomOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.AssociateSkillGroupWithRoomInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.AssociateSkillGroupWithRoomOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.AssociateSkillGroupWithRoomInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.AssociateSkillGroupWithRoomOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.AssociateSkillGroupWithRoomOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.AssociateSkillGroupWithRoomInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateSkillWithSkillGroup provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) AssociateSkillWithSkillGroup(ctx context.Context, params *alexaforbusiness.AssociateSkillWithSkillGroupInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.AssociateSkillWithSkillGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateSkillWithSkillGroup")
	}

	var r0 *alexaforbusiness.AssociateSkillWithSkillGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.AssociateSkillWithSkillGroupInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.AssociateSkillWithSkillGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.AssociateSkillWithSkillGroupInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.AssociateSkillWithSkillGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.AssociateSkillWithSkillGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.AssociateSkillWithSkillGroupInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateSkillWithUsers provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) AssociateSkillWithUsers(ctx context.Context, params *alexaforbusiness.AssociateSkillWithUsersInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.AssociateSkillWithUsersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateSkillWithUsers")
	}

	var r0 *alexaforbusiness.AssociateSkillWithUsersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.AssociateSkillWithUsersInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.AssociateSkillWithUsersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.AssociateSkillWithUsersInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.AssociateSkillWithUsersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.AssociateSkillWithUsersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.AssociateSkillWithUsersInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAddressBook provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) CreateAddressBook(ctx context.Context, params *alexaforbusiness.CreateAddressBookInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.CreateAddressBookOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAddressBook")
	}

	var r0 *alexaforbusiness.CreateAddressBookOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.CreateAddressBookInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.CreateAddressBookOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.CreateAddressBookInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.CreateAddressBookOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.CreateAddressBookOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.CreateAddressBookInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBusinessReportSchedule provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) CreateBusinessReportSchedule(ctx context.Context, params *alexaforbusiness.CreateBusinessReportScheduleInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.CreateBusinessReportScheduleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBusinessReportSchedule")
	}

	var r0 *alexaforbusiness.CreateBusinessReportScheduleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.CreateBusinessReportScheduleInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.CreateBusinessReportScheduleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.CreateBusinessReportScheduleInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.CreateBusinessReportScheduleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.CreateBusinessReportScheduleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.CreateBusinessReportScheduleInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConferenceProvider provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) CreateConferenceProvider(ctx context.Context, params *alexaforbusiness.CreateConferenceProviderInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.CreateConferenceProviderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateConferenceProvider")
	}

	var r0 *alexaforbusiness.CreateConferenceProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.CreateConferenceProviderInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.CreateConferenceProviderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.CreateConferenceProviderInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.CreateConferenceProviderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.CreateConferenceProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.CreateConferenceProviderInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateContact provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) CreateContact(ctx context.Context, params *alexaforbusiness.CreateContactInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.CreateContactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateContact")
	}

	var r0 *alexaforbusiness.CreateContactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.CreateContactInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.CreateContactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.CreateContactInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.CreateContactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.CreateContactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.CreateContactInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGatewayGroup provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) CreateGatewayGroup(ctx context.Context, params *alexaforbusiness.CreateGatewayGroupInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.CreateGatewayGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateGatewayGroup")
	}

	var r0 *alexaforbusiness.CreateGatewayGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.CreateGatewayGroupInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.CreateGatewayGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.CreateGatewayGroupInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.CreateGatewayGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.CreateGatewayGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.CreateGatewayGroupInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNetworkProfile provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) CreateNetworkProfile(ctx context.Context, params *alexaforbusiness.CreateNetworkProfileInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.CreateNetworkProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateNetworkProfile")
	}

	var r0 *alexaforbusiness.CreateNetworkProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.CreateNetworkProfileInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.CreateNetworkProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.CreateNetworkProfileInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.CreateNetworkProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.CreateNetworkProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.CreateNetworkProfileInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProfile provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) CreateProfile(ctx context.Context, params *alexaforbusiness.CreateProfileInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.CreateProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateProfile")
	}

	var r0 *alexaforbusiness.CreateProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.CreateProfileInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.CreateProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.CreateProfileInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.CreateProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.CreateProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.CreateProfileInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRoom provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) CreateRoom(ctx context.Context, params *alexaforbusiness.CreateRoomInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.CreateRoomOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRoom")
	}

	var r0 *alexaforbusiness.CreateRoomOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.CreateRoomInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.CreateRoomOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.CreateRoomInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.CreateRoomOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.CreateRoomOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.CreateRoomInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSkillGroup provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) CreateSkillGroup(ctx context.Context, params *alexaforbusiness.CreateSkillGroupInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.CreateSkillGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSkillGroup")
	}

	var r0 *alexaforbusiness.CreateSkillGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.CreateSkillGroupInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.CreateSkillGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.CreateSkillGroupInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.CreateSkillGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.CreateSkillGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.CreateSkillGroupInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) CreateUser(ctx context.Context, params *alexaforbusiness.CreateUserInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.CreateUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *alexaforbusiness.CreateUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.CreateUserInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.CreateUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.CreateUserInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.CreateUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.CreateUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.CreateUserInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAddressBook provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) DeleteAddressBook(ctx context.Context, params *alexaforbusiness.DeleteAddressBookInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.DeleteAddressBookOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAddressBook")
	}

	var r0 *alexaforbusiness.DeleteAddressBookOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.DeleteAddressBookInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.DeleteAddressBookOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.DeleteAddressBookInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.DeleteAddressBookOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.DeleteAddressBookOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.DeleteAddressBookInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBusinessReportSchedule provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) DeleteBusinessReportSchedule(ctx context.Context, params *alexaforbusiness.DeleteBusinessReportScheduleInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.DeleteBusinessReportScheduleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBusinessReportSchedule")
	}

	var r0 *alexaforbusiness.DeleteBusinessReportScheduleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.DeleteBusinessReportScheduleInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.DeleteBusinessReportScheduleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.DeleteBusinessReportScheduleInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.DeleteBusinessReportScheduleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.DeleteBusinessReportScheduleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.DeleteBusinessReportScheduleInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConferenceProvider provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) DeleteConferenceProvider(ctx context.Context, params *alexaforbusiness.DeleteConferenceProviderInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.DeleteConferenceProviderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConferenceProvider")
	}

	var r0 *alexaforbusiness.DeleteConferenceProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.DeleteConferenceProviderInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.DeleteConferenceProviderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.DeleteConferenceProviderInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.DeleteConferenceProviderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.DeleteConferenceProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.DeleteConferenceProviderInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteContact provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) DeleteContact(ctx context.Context, params *alexaforbusiness.DeleteContactInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.DeleteContactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteContact")
	}

	var r0 *alexaforbusiness.DeleteContactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.DeleteContactInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.DeleteContactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.DeleteContactInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.DeleteContactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.DeleteContactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.DeleteContactInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDevice provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) DeleteDevice(ctx context.Context, params *alexaforbusiness.DeleteDeviceInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.DeleteDeviceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDevice")
	}

	var r0 *alexaforbusiness.DeleteDeviceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.DeleteDeviceInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.DeleteDeviceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.DeleteDeviceInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.DeleteDeviceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.DeleteDeviceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.DeleteDeviceInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDeviceUsageData provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) DeleteDeviceUsageData(ctx context.Context, params *alexaforbusiness.DeleteDeviceUsageDataInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.DeleteDeviceUsageDataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDeviceUsageData")
	}

	var r0 *alexaforbusiness.DeleteDeviceUsageDataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.DeleteDeviceUsageDataInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.DeleteDeviceUsageDataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.DeleteDeviceUsageDataInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.DeleteDeviceUsageDataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.DeleteDeviceUsageDataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.DeleteDeviceUsageDataInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGatewayGroup provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) DeleteGatewayGroup(ctx context.Context, params *alexaforbusiness.DeleteGatewayGroupInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.DeleteGatewayGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGatewayGroup")
	}

	var r0 *alexaforbusiness.DeleteGatewayGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.DeleteGatewayGroupInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.DeleteGatewayGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.DeleteGatewayGroupInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.DeleteGatewayGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.DeleteGatewayGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.DeleteGatewayGroupInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNetworkProfile provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) DeleteNetworkProfile(ctx context.Context, params *alexaforbusiness.DeleteNetworkProfileInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.DeleteNetworkProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNetworkProfile")
	}

	var r0 *alexaforbusiness.DeleteNetworkProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.DeleteNetworkProfileInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.DeleteNetworkProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.DeleteNetworkProfileInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.DeleteNetworkProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.DeleteNetworkProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.DeleteNetworkProfileInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProfile provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) DeleteProfile(ctx context.Context, params *alexaforbusiness.DeleteProfileInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.DeleteProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProfile")
	}

	var r0 *alexaforbusiness.DeleteProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.DeleteProfileInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.DeleteProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.DeleteProfileInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.DeleteProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.DeleteProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.DeleteProfileInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRoom provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) DeleteRoom(ctx context.Context, params *alexaforbusiness.DeleteRoomInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.DeleteRoomOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRoom")
	}

	var r0 *alexaforbusiness.DeleteRoomOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.DeleteRoomInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.DeleteRoomOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.DeleteRoomInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.DeleteRoomOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.DeleteRoomOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.DeleteRoomInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRoomSkillParameter provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) DeleteRoomSkillParameter(ctx context.Context, params *alexaforbusiness.DeleteRoomSkillParameterInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.DeleteRoomSkillParameterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRoomSkillParameter")
	}

	var r0 *alexaforbusiness.DeleteRoomSkillParameterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.DeleteRoomSkillParameterInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.DeleteRoomSkillParameterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.DeleteRoomSkillParameterInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.DeleteRoomSkillParameterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.DeleteRoomSkillParameterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.DeleteRoomSkillParameterInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSkillAuthorization provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) DeleteSkillAuthorization(ctx context.Context, params *alexaforbusiness.DeleteSkillAuthorizationInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.DeleteSkillAuthorizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSkillAuthorization")
	}

	var r0 *alexaforbusiness.DeleteSkillAuthorizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.DeleteSkillAuthorizationInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.DeleteSkillAuthorizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.DeleteSkillAuthorizationInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.DeleteSkillAuthorizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.DeleteSkillAuthorizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.DeleteSkillAuthorizationInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSkillGroup provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) DeleteSkillGroup(ctx context.Context, params *alexaforbusiness.DeleteSkillGroupInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.DeleteSkillGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSkillGroup")
	}

	var r0 *alexaforbusiness.DeleteSkillGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.DeleteSkillGroupInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.DeleteSkillGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.DeleteSkillGroupInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.DeleteSkillGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.DeleteSkillGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.DeleteSkillGroupInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) DeleteUser(ctx context.Context, params *alexaforbusiness.DeleteUserInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.DeleteUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 *alexaforbusiness.DeleteUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.DeleteUserInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.DeleteUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.DeleteUserInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.DeleteUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.DeleteUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.DeleteUserInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateContactFromAddressBook provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) DisassociateContactFromAddressBook(ctx context.Context, params *alexaforbusiness.DisassociateContactFromAddressBookInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.DisassociateContactFromAddressBookOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateContactFromAddressBook")
	}

	var r0 *alexaforbusiness.DisassociateContactFromAddressBookOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.DisassociateContactFromAddressBookInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.DisassociateContactFromAddressBookOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.DisassociateContactFromAddressBookInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.DisassociateContactFromAddressBookOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.DisassociateContactFromAddressBookOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.DisassociateContactFromAddressBookInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateDeviceFromRoom provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) DisassociateDeviceFromRoom(ctx context.Context, params *alexaforbusiness.DisassociateDeviceFromRoomInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.DisassociateDeviceFromRoomOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateDeviceFromRoom")
	}

	var r0 *alexaforbusiness.DisassociateDeviceFromRoomOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.DisassociateDeviceFromRoomInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.DisassociateDeviceFromRoomOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.DisassociateDeviceFromRoomInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.DisassociateDeviceFromRoomOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.DisassociateDeviceFromRoomOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.DisassociateDeviceFromRoomInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateSkillFromSkillGroup provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) DisassociateSkillFromSkillGroup(ctx context.Context, params *alexaforbusiness.DisassociateSkillFromSkillGroupInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.DisassociateSkillFromSkillGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateSkillFromSkillGroup")
	}

	var r0 *alexaforbusiness.DisassociateSkillFromSkillGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.DisassociateSkillFromSkillGroupInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.DisassociateSkillFromSkillGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.DisassociateSkillFromSkillGroupInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.DisassociateSkillFromSkillGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.DisassociateSkillFromSkillGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.DisassociateSkillFromSkillGroupInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateSkillFromUsers provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) DisassociateSkillFromUsers(ctx context.Context, params *alexaforbusiness.DisassociateSkillFromUsersInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.DisassociateSkillFromUsersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateSkillFromUsers")
	}

	var r0 *alexaforbusiness.DisassociateSkillFromUsersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.DisassociateSkillFromUsersInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.DisassociateSkillFromUsersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.DisassociateSkillFromUsersInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.DisassociateSkillFromUsersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.DisassociateSkillFromUsersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.DisassociateSkillFromUsersInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateSkillGroupFromRoom provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) DisassociateSkillGroupFromRoom(ctx context.Context, params *alexaforbusiness.DisassociateSkillGroupFromRoomInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.DisassociateSkillGroupFromRoomOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateSkillGroupFromRoom")
	}

	var r0 *alexaforbusiness.DisassociateSkillGroupFromRoomOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.DisassociateSkillGroupFromRoomInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.DisassociateSkillGroupFromRoomOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.DisassociateSkillGroupFromRoomInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.DisassociateSkillGroupFromRoomOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.DisassociateSkillGroupFromRoomOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.DisassociateSkillGroupFromRoomInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ForgetSmartHomeAppliances provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) ForgetSmartHomeAppliances(ctx context.Context, params *alexaforbusiness.ForgetSmartHomeAppliancesInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.ForgetSmartHomeAppliancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ForgetSmartHomeAppliances")
	}

	var r0 *alexaforbusiness.ForgetSmartHomeAppliancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.ForgetSmartHomeAppliancesInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.ForgetSmartHomeAppliancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.ForgetSmartHomeAppliancesInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.ForgetSmartHomeAppliancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.ForgetSmartHomeAppliancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.ForgetSmartHomeAppliancesInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAddressBook provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) GetAddressBook(ctx context.Context, params *alexaforbusiness.GetAddressBookInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.GetAddressBookOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAddressBook")
	}

	var r0 *alexaforbusiness.GetAddressBookOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.GetAddressBookInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.GetAddressBookOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.GetAddressBookInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.GetAddressBookOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.GetAddressBookOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.GetAddressBookInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConferencePreference provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) GetConferencePreference(ctx context.Context, params *alexaforbusiness.GetConferencePreferenceInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.GetConferencePreferenceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetConferencePreference")
	}

	var r0 *alexaforbusiness.GetConferencePreferenceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.GetConferencePreferenceInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.GetConferencePreferenceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.GetConferencePreferenceInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.GetConferencePreferenceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.GetConferencePreferenceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.GetConferencePreferenceInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConferenceProvider provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) GetConferenceProvider(ctx context.Context, params *alexaforbusiness.GetConferenceProviderInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.GetConferenceProviderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetConferenceProvider")
	}

	var r0 *alexaforbusiness.GetConferenceProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.GetConferenceProviderInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.GetConferenceProviderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.GetConferenceProviderInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.GetConferenceProviderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.GetConferenceProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.GetConferenceProviderInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContact provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) GetContact(ctx context.Context, params *alexaforbusiness.GetContactInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.GetContactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetContact")
	}

	var r0 *alexaforbusiness.GetContactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.GetContactInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.GetContactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.GetContactInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.GetContactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.GetContactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.GetContactInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDevice provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) GetDevice(ctx context.Context, params *alexaforbusiness.GetDeviceInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.GetDeviceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDevice")
	}

	var r0 *alexaforbusiness.GetDeviceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.GetDeviceInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.GetDeviceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.GetDeviceInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.GetDeviceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.GetDeviceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.GetDeviceInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGateway provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) GetGateway(ctx context.Context, params *alexaforbusiness.GetGatewayInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.GetGatewayOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGateway")
	}

	var r0 *alexaforbusiness.GetGatewayOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.GetGatewayInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.GetGatewayOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.GetGatewayInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.GetGatewayOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.GetGatewayOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.GetGatewayInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGatewayGroup provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) GetGatewayGroup(ctx context.Context, params *alexaforbusiness.GetGatewayGroupInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.GetGatewayGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGatewayGroup")
	}

	var r0 *alexaforbusiness.GetGatewayGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.GetGatewayGroupInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.GetGatewayGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.GetGatewayGroupInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.GetGatewayGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.GetGatewayGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.GetGatewayGroupInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvitationConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) GetInvitationConfiguration(ctx context.Context, params *alexaforbusiness.GetInvitationConfigurationInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.GetInvitationConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetInvitationConfiguration")
	}

	var r0 *alexaforbusiness.GetInvitationConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.GetInvitationConfigurationInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.GetInvitationConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.GetInvitationConfigurationInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.GetInvitationConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.GetInvitationConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.GetInvitationConfigurationInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetworkProfile provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) GetNetworkProfile(ctx context.Context, params *alexaforbusiness.GetNetworkProfileInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.GetNetworkProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkProfile")
	}

	var r0 *alexaforbusiness.GetNetworkProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.GetNetworkProfileInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.GetNetworkProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.GetNetworkProfileInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.GetNetworkProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.GetNetworkProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.GetNetworkProfileInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfile provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) GetProfile(ctx context.Context, params *alexaforbusiness.GetProfileInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.GetProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProfile")
	}

	var r0 *alexaforbusiness.GetProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.GetProfileInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.GetProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.GetProfileInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.GetProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.GetProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.GetProfileInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoom provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) GetRoom(ctx context.Context, params *alexaforbusiness.GetRoomInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.GetRoomOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRoom")
	}

	var r0 *alexaforbusiness.GetRoomOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.GetRoomInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.GetRoomOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.GetRoomInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.GetRoomOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.GetRoomOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.GetRoomInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoomSkillParameter provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) GetRoomSkillParameter(ctx context.Context, params *alexaforbusiness.GetRoomSkillParameterInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.GetRoomSkillParameterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRoomSkillParameter")
	}

	var r0 *alexaforbusiness.GetRoomSkillParameterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.GetRoomSkillParameterInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.GetRoomSkillParameterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.GetRoomSkillParameterInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.GetRoomSkillParameterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.GetRoomSkillParameterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.GetRoomSkillParameterInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSkillGroup provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) GetSkillGroup(ctx context.Context, params *alexaforbusiness.GetSkillGroupInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.GetSkillGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSkillGroup")
	}

	var r0 *alexaforbusiness.GetSkillGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.GetSkillGroupInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.GetSkillGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.GetSkillGroupInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.GetSkillGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.GetSkillGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.GetSkillGroupInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBusinessReportSchedules provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) ListBusinessReportSchedules(ctx context.Context, params *alexaforbusiness.ListBusinessReportSchedulesInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.ListBusinessReportSchedulesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBusinessReportSchedules")
	}

	var r0 *alexaforbusiness.ListBusinessReportSchedulesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.ListBusinessReportSchedulesInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.ListBusinessReportSchedulesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.ListBusinessReportSchedulesInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.ListBusinessReportSchedulesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.ListBusinessReportSchedulesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.ListBusinessReportSchedulesInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConferenceProviders provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) ListConferenceProviders(ctx context.Context, params *alexaforbusiness.ListConferenceProvidersInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.ListConferenceProvidersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListConferenceProviders")
	}

	var r0 *alexaforbusiness.ListConferenceProvidersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.ListConferenceProvidersInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.ListConferenceProvidersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.ListConferenceProvidersInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.ListConferenceProvidersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.ListConferenceProvidersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.ListConferenceProvidersInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDeviceEvents provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) ListDeviceEvents(ctx context.Context, params *alexaforbusiness.ListDeviceEventsInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.ListDeviceEventsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDeviceEvents")
	}

	var r0 *alexaforbusiness.ListDeviceEventsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.ListDeviceEventsInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.ListDeviceEventsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.ListDeviceEventsInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.ListDeviceEventsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.ListDeviceEventsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.ListDeviceEventsInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGatewayGroups provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) ListGatewayGroups(ctx context.Context, params *alexaforbusiness.ListGatewayGroupsInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.ListGatewayGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGatewayGroups")
	}

	var r0 *alexaforbusiness.ListGatewayGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.ListGatewayGroupsInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.ListGatewayGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.ListGatewayGroupsInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.ListGatewayGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.ListGatewayGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.ListGatewayGroupsInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGateways provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) ListGateways(ctx context.Context, params *alexaforbusiness.ListGatewaysInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.ListGatewaysOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGateways")
	}

	var r0 *alexaforbusiness.ListGatewaysOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.ListGatewaysInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.ListGatewaysOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.ListGatewaysInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.ListGatewaysOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.ListGatewaysOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.ListGatewaysInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSkills provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) ListSkills(ctx context.Context, params *alexaforbusiness.ListSkillsInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.ListSkillsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSkills")
	}

	var r0 *alexaforbusiness.ListSkillsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.ListSkillsInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.ListSkillsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.ListSkillsInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.ListSkillsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.ListSkillsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.ListSkillsInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSkillsStoreCategories provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) ListSkillsStoreCategories(ctx context.Context, params *alexaforbusiness.ListSkillsStoreCategoriesInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.ListSkillsStoreCategoriesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSkillsStoreCategories")
	}

	var r0 *alexaforbusiness.ListSkillsStoreCategoriesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.ListSkillsStoreCategoriesInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.ListSkillsStoreCategoriesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.ListSkillsStoreCategoriesInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.ListSkillsStoreCategoriesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.ListSkillsStoreCategoriesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.ListSkillsStoreCategoriesInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSkillsStoreSkillsByCategory provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) ListSkillsStoreSkillsByCategory(ctx context.Context, params *alexaforbusiness.ListSkillsStoreSkillsByCategoryInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.ListSkillsStoreSkillsByCategoryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSkillsStoreSkillsByCategory")
	}

	var r0 *alexaforbusiness.ListSkillsStoreSkillsByCategoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.ListSkillsStoreSkillsByCategoryInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.ListSkillsStoreSkillsByCategoryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.ListSkillsStoreSkillsByCategoryInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.ListSkillsStoreSkillsByCategoryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.ListSkillsStoreSkillsByCategoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.ListSkillsStoreSkillsByCategoryInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSmartHomeAppliances provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) ListSmartHomeAppliances(ctx context.Context, params *alexaforbusiness.ListSmartHomeAppliancesInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.ListSmartHomeAppliancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSmartHomeAppliances")
	}

	var r0 *alexaforbusiness.ListSmartHomeAppliancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.ListSmartHomeAppliancesInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.ListSmartHomeAppliancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.ListSmartHomeAppliancesInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.ListSmartHomeAppliancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.ListSmartHomeAppliancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.ListSmartHomeAppliancesInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTags provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) ListTags(ctx context.Context, params *alexaforbusiness.ListTagsInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.ListTagsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTags")
	}

	var r0 *alexaforbusiness.ListTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.ListTagsInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.ListTagsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.ListTagsInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.ListTagsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.ListTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.ListTagsInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *AlexaforbusinessClient) Options() alexaforbusiness.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 alexaforbusiness.Options
	if rf, ok := ret.Get(0).(func() alexaforbusiness.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(alexaforbusiness.Options)
	}

	return r0
}

// PutConferencePreference provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) PutConferencePreference(ctx context.Context, params *alexaforbusiness.PutConferencePreferenceInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.PutConferencePreferenceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutConferencePreference")
	}

	var r0 *alexaforbusiness.PutConferencePreferenceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.PutConferencePreferenceInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.PutConferencePreferenceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.PutConferencePreferenceInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.PutConferencePreferenceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.PutConferencePreferenceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.PutConferencePreferenceInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutInvitationConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) PutInvitationConfiguration(ctx context.Context, params *alexaforbusiness.PutInvitationConfigurationInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.PutInvitationConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutInvitationConfiguration")
	}

	var r0 *alexaforbusiness.PutInvitationConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.PutInvitationConfigurationInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.PutInvitationConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.PutInvitationConfigurationInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.PutInvitationConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.PutInvitationConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.PutInvitationConfigurationInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutRoomSkillParameter provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) PutRoomSkillParameter(ctx context.Context, params *alexaforbusiness.PutRoomSkillParameterInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.PutRoomSkillParameterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutRoomSkillParameter")
	}

	var r0 *alexaforbusiness.PutRoomSkillParameterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.PutRoomSkillParameterInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.PutRoomSkillParameterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.PutRoomSkillParameterInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.PutRoomSkillParameterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.PutRoomSkillParameterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.PutRoomSkillParameterInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutSkillAuthorization provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) PutSkillAuthorization(ctx context.Context, params *alexaforbusiness.PutSkillAuthorizationInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.PutSkillAuthorizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutSkillAuthorization")
	}

	var r0 *alexaforbusiness.PutSkillAuthorizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.PutSkillAuthorizationInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.PutSkillAuthorizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.PutSkillAuthorizationInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.PutSkillAuthorizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.PutSkillAuthorizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.PutSkillAuthorizationInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterAVSDevice provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) RegisterAVSDevice(ctx context.Context, params *alexaforbusiness.RegisterAVSDeviceInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.RegisterAVSDeviceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAVSDevice")
	}

	var r0 *alexaforbusiness.RegisterAVSDeviceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.RegisterAVSDeviceInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.RegisterAVSDeviceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.RegisterAVSDeviceInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.RegisterAVSDeviceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.RegisterAVSDeviceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.RegisterAVSDeviceInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RejectSkill provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) RejectSkill(ctx context.Context, params *alexaforbusiness.RejectSkillInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.RejectSkillOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RejectSkill")
	}

	var r0 *alexaforbusiness.RejectSkillOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.RejectSkillInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.RejectSkillOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.RejectSkillInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.RejectSkillOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.RejectSkillOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.RejectSkillInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResolveRoom provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) ResolveRoom(ctx context.Context, params *alexaforbusiness.ResolveRoomInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.ResolveRoomOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ResolveRoom")
	}

	var r0 *alexaforbusiness.ResolveRoomOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.ResolveRoomInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.ResolveRoomOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.ResolveRoomInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.ResolveRoomOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.ResolveRoomOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.ResolveRoomInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevokeInvitation provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) RevokeInvitation(ctx context.Context, params *alexaforbusiness.RevokeInvitationInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.RevokeInvitationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RevokeInvitation")
	}

	var r0 *alexaforbusiness.RevokeInvitationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.RevokeInvitationInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.RevokeInvitationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.RevokeInvitationInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.RevokeInvitationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.RevokeInvitationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.RevokeInvitationInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchAddressBooks provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) SearchAddressBooks(ctx context.Context, params *alexaforbusiness.SearchAddressBooksInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.SearchAddressBooksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchAddressBooks")
	}

	var r0 *alexaforbusiness.SearchAddressBooksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.SearchAddressBooksInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.SearchAddressBooksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.SearchAddressBooksInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.SearchAddressBooksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.SearchAddressBooksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.SearchAddressBooksInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchContacts provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) SearchContacts(ctx context.Context, params *alexaforbusiness.SearchContactsInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.SearchContactsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchContacts")
	}

	var r0 *alexaforbusiness.SearchContactsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.SearchContactsInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.SearchContactsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.SearchContactsInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.SearchContactsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.SearchContactsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.SearchContactsInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchDevices provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) SearchDevices(ctx context.Context, params *alexaforbusiness.SearchDevicesInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.SearchDevicesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchDevices")
	}

	var r0 *alexaforbusiness.SearchDevicesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.SearchDevicesInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.SearchDevicesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.SearchDevicesInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.SearchDevicesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.SearchDevicesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.SearchDevicesInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchNetworkProfiles provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) SearchNetworkProfiles(ctx context.Context, params *alexaforbusiness.SearchNetworkProfilesInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.SearchNetworkProfilesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchNetworkProfiles")
	}

	var r0 *alexaforbusiness.SearchNetworkProfilesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.SearchNetworkProfilesInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.SearchNetworkProfilesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.SearchNetworkProfilesInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.SearchNetworkProfilesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.SearchNetworkProfilesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.SearchNetworkProfilesInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchProfiles provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) SearchProfiles(ctx context.Context, params *alexaforbusiness.SearchProfilesInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.SearchProfilesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchProfiles")
	}

	var r0 *alexaforbusiness.SearchProfilesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.SearchProfilesInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.SearchProfilesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.SearchProfilesInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.SearchProfilesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.SearchProfilesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.SearchProfilesInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchRooms provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) SearchRooms(ctx context.Context, params *alexaforbusiness.SearchRoomsInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.SearchRoomsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchRooms")
	}

	var r0 *alexaforbusiness.SearchRoomsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.SearchRoomsInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.SearchRoomsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.SearchRoomsInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.SearchRoomsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.SearchRoomsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.SearchRoomsInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchSkillGroups provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) SearchSkillGroups(ctx context.Context, params *alexaforbusiness.SearchSkillGroupsInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.SearchSkillGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchSkillGroups")
	}

	var r0 *alexaforbusiness.SearchSkillGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.SearchSkillGroupsInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.SearchSkillGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.SearchSkillGroupsInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.SearchSkillGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.SearchSkillGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.SearchSkillGroupsInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchUsers provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) SearchUsers(ctx context.Context, params *alexaforbusiness.SearchUsersInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.SearchUsersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchUsers")
	}

	var r0 *alexaforbusiness.SearchUsersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.SearchUsersInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.SearchUsersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.SearchUsersInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.SearchUsersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.SearchUsersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.SearchUsersInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendAnnouncement provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) SendAnnouncement(ctx context.Context, params *alexaforbusiness.SendAnnouncementInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.SendAnnouncementOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendAnnouncement")
	}

	var r0 *alexaforbusiness.SendAnnouncementOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.SendAnnouncementInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.SendAnnouncementOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.SendAnnouncementInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.SendAnnouncementOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.SendAnnouncementOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.SendAnnouncementInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendInvitation provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) SendInvitation(ctx context.Context, params *alexaforbusiness.SendInvitationInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.SendInvitationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendInvitation")
	}

	var r0 *alexaforbusiness.SendInvitationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.SendInvitationInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.SendInvitationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.SendInvitationInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.SendInvitationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.SendInvitationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.SendInvitationInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartDeviceSync provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) StartDeviceSync(ctx context.Context, params *alexaforbusiness.StartDeviceSyncInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.StartDeviceSyncOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartDeviceSync")
	}

	var r0 *alexaforbusiness.StartDeviceSyncOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.StartDeviceSyncInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.StartDeviceSyncOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.StartDeviceSyncInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.StartDeviceSyncOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.StartDeviceSyncOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.StartDeviceSyncInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartSmartHomeApplianceDiscovery provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) StartSmartHomeApplianceDiscovery(ctx context.Context, params *alexaforbusiness.StartSmartHomeApplianceDiscoveryInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.StartSmartHomeApplianceDiscoveryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartSmartHomeApplianceDiscovery")
	}

	var r0 *alexaforbusiness.StartSmartHomeApplianceDiscoveryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.StartSmartHomeApplianceDiscoveryInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.StartSmartHomeApplianceDiscoveryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.StartSmartHomeApplianceDiscoveryInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.StartSmartHomeApplianceDiscoveryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.StartSmartHomeApplianceDiscoveryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.StartSmartHomeApplianceDiscoveryInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) TagResource(ctx context.Context, params *alexaforbusiness.TagResourceInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *alexaforbusiness.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.TagResourceInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.TagResourceInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.TagResourceInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) UntagResource(ctx context.Context, params *alexaforbusiness.UntagResourceInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *alexaforbusiness.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.UntagResourceInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.UntagResourceInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.UntagResourceInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAddressBook provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) UpdateAddressBook(ctx context.Context, params *alexaforbusiness.UpdateAddressBookInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.UpdateAddressBookOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAddressBook")
	}

	var r0 *alexaforbusiness.UpdateAddressBookOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.UpdateAddressBookInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.UpdateAddressBookOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.UpdateAddressBookInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.UpdateAddressBookOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.UpdateAddressBookOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.UpdateAddressBookInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBusinessReportSchedule provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) UpdateBusinessReportSchedule(ctx context.Context, params *alexaforbusiness.UpdateBusinessReportScheduleInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.UpdateBusinessReportScheduleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBusinessReportSchedule")
	}

	var r0 *alexaforbusiness.UpdateBusinessReportScheduleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.UpdateBusinessReportScheduleInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.UpdateBusinessReportScheduleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.UpdateBusinessReportScheduleInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.UpdateBusinessReportScheduleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.UpdateBusinessReportScheduleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.UpdateBusinessReportScheduleInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConferenceProvider provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) UpdateConferenceProvider(ctx context.Context, params *alexaforbusiness.UpdateConferenceProviderInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.UpdateConferenceProviderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConferenceProvider")
	}

	var r0 *alexaforbusiness.UpdateConferenceProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.UpdateConferenceProviderInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.UpdateConferenceProviderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.UpdateConferenceProviderInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.UpdateConferenceProviderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.UpdateConferenceProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.UpdateConferenceProviderInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateContact provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) UpdateContact(ctx context.Context, params *alexaforbusiness.UpdateContactInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.UpdateContactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateContact")
	}

	var r0 *alexaforbusiness.UpdateContactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.UpdateContactInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.UpdateContactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.UpdateContactInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.UpdateContactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.UpdateContactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.UpdateContactInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDevice provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) UpdateDevice(ctx context.Context, params *alexaforbusiness.UpdateDeviceInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.UpdateDeviceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDevice")
	}

	var r0 *alexaforbusiness.UpdateDeviceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.UpdateDeviceInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.UpdateDeviceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.UpdateDeviceInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.UpdateDeviceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.UpdateDeviceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.UpdateDeviceInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGateway provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) UpdateGateway(ctx context.Context, params *alexaforbusiness.UpdateGatewayInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.UpdateGatewayOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGateway")
	}

	var r0 *alexaforbusiness.UpdateGatewayOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.UpdateGatewayInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.UpdateGatewayOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.UpdateGatewayInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.UpdateGatewayOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.UpdateGatewayOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.UpdateGatewayInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGatewayGroup provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) UpdateGatewayGroup(ctx context.Context, params *alexaforbusiness.UpdateGatewayGroupInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.UpdateGatewayGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGatewayGroup")
	}

	var r0 *alexaforbusiness.UpdateGatewayGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.UpdateGatewayGroupInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.UpdateGatewayGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.UpdateGatewayGroupInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.UpdateGatewayGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.UpdateGatewayGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.UpdateGatewayGroupInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNetworkProfile provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) UpdateNetworkProfile(ctx context.Context, params *alexaforbusiness.UpdateNetworkProfileInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.UpdateNetworkProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNetworkProfile")
	}

	var r0 *alexaforbusiness.UpdateNetworkProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.UpdateNetworkProfileInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.UpdateNetworkProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.UpdateNetworkProfileInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.UpdateNetworkProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.UpdateNetworkProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.UpdateNetworkProfileInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProfile provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) UpdateProfile(ctx context.Context, params *alexaforbusiness.UpdateProfileInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.UpdateProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfile")
	}

	var r0 *alexaforbusiness.UpdateProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.UpdateProfileInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.UpdateProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.UpdateProfileInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.UpdateProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.UpdateProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.UpdateProfileInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRoom provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) UpdateRoom(ctx context.Context, params *alexaforbusiness.UpdateRoomInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.UpdateRoomOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRoom")
	}

	var r0 *alexaforbusiness.UpdateRoomOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.UpdateRoomInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.UpdateRoomOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.UpdateRoomInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.UpdateRoomOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.UpdateRoomOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.UpdateRoomInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSkillGroup provides a mock function with given fields: ctx, params, optFns
func (_m *AlexaforbusinessClient) UpdateSkillGroup(ctx context.Context, params *alexaforbusiness.UpdateSkillGroupInput, optFns ...func(*alexaforbusiness.Options)) (*alexaforbusiness.UpdateSkillGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSkillGroup")
	}

	var r0 *alexaforbusiness.UpdateSkillGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.UpdateSkillGroupInput, ...func(*alexaforbusiness.Options)) (*alexaforbusiness.UpdateSkillGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *alexaforbusiness.UpdateSkillGroupInput, ...func(*alexaforbusiness.Options)) *alexaforbusiness.UpdateSkillGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*alexaforbusiness.UpdateSkillGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *alexaforbusiness.UpdateSkillGroupInput, ...func(*alexaforbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAlexaforbusinessClient creates a new instance of AlexaforbusinessClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAlexaforbusinessClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *AlexaforbusinessClient {
	mock := &AlexaforbusinessClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
