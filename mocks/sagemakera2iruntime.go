// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	sagemakera2iruntime "github.com/aws/aws-sdk-go-v2/service/sagemakera2iruntime"
	mock "github.com/stretchr/testify/mock"
)

// Sagemakera2iruntimeClient is an autogenerated mock type for the Sagemakera2iruntimeClient type
type Sagemakera2iruntimeClient struct {
	mock.Mock
}

// DeleteHumanLoop provides a mock function with given fields: ctx, params, optFns
func (_m *Sagemakera2iruntimeClient) DeleteHumanLoop(ctx context.Context, params *sagemakera2iruntime.DeleteHumanLoopInput, optFns ...func(*sagemakera2iruntime.Options)) (*sagemakera2iruntime.DeleteHumanLoopOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteHumanLoop")
	}

	var r0 *sagemakera2iruntime.DeleteHumanLoopOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakera2iruntime.DeleteHumanLoopInput, ...func(*sagemakera2iruntime.Options)) (*sagemakera2iruntime.DeleteHumanLoopOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakera2iruntime.DeleteHumanLoopInput, ...func(*sagemakera2iruntime.Options)) *sagemakera2iruntime.DeleteHumanLoopOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemakera2iruntime.DeleteHumanLoopOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemakera2iruntime.DeleteHumanLoopInput, ...func(*sagemakera2iruntime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeHumanLoop provides a mock function with given fields: ctx, params, optFns
func (_m *Sagemakera2iruntimeClient) DescribeHumanLoop(ctx context.Context, params *sagemakera2iruntime.DescribeHumanLoopInput, optFns ...func(*sagemakera2iruntime.Options)) (*sagemakera2iruntime.DescribeHumanLoopOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeHumanLoop")
	}

	var r0 *sagemakera2iruntime.DescribeHumanLoopOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakera2iruntime.DescribeHumanLoopInput, ...func(*sagemakera2iruntime.Options)) (*sagemakera2iruntime.DescribeHumanLoopOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakera2iruntime.DescribeHumanLoopInput, ...func(*sagemakera2iruntime.Options)) *sagemakera2iruntime.DescribeHumanLoopOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemakera2iruntime.DescribeHumanLoopOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemakera2iruntime.DescribeHumanLoopInput, ...func(*sagemakera2iruntime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListHumanLoops provides a mock function with given fields: ctx, params, optFns
func (_m *Sagemakera2iruntimeClient) ListHumanLoops(ctx context.Context, params *sagemakera2iruntime.ListHumanLoopsInput, optFns ...func(*sagemakera2iruntime.Options)) (*sagemakera2iruntime.ListHumanLoopsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListHumanLoops")
	}

	var r0 *sagemakera2iruntime.ListHumanLoopsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakera2iruntime.ListHumanLoopsInput, ...func(*sagemakera2iruntime.Options)) (*sagemakera2iruntime.ListHumanLoopsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakera2iruntime.ListHumanLoopsInput, ...func(*sagemakera2iruntime.Options)) *sagemakera2iruntime.ListHumanLoopsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemakera2iruntime.ListHumanLoopsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemakera2iruntime.ListHumanLoopsInput, ...func(*sagemakera2iruntime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *Sagemakera2iruntimeClient) Options() sagemakera2iruntime.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 sagemakera2iruntime.Options
	if rf, ok := ret.Get(0).(func() sagemakera2iruntime.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(sagemakera2iruntime.Options)
	}

	return r0
}

// StartHumanLoop provides a mock function with given fields: ctx, params, optFns
func (_m *Sagemakera2iruntimeClient) StartHumanLoop(ctx context.Context, params *sagemakera2iruntime.StartHumanLoopInput, optFns ...func(*sagemakera2iruntime.Options)) (*sagemakera2iruntime.StartHumanLoopOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartHumanLoop")
	}

	var r0 *sagemakera2iruntime.StartHumanLoopOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakera2iruntime.StartHumanLoopInput, ...func(*sagemakera2iruntime.Options)) (*sagemakera2iruntime.StartHumanLoopOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakera2iruntime.StartHumanLoopInput, ...func(*sagemakera2iruntime.Options)) *sagemakera2iruntime.StartHumanLoopOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemakera2iruntime.StartHumanLoopOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemakera2iruntime.StartHumanLoopInput, ...func(*sagemakera2iruntime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopHumanLoop provides a mock function with given fields: ctx, params, optFns
func (_m *Sagemakera2iruntimeClient) StopHumanLoop(ctx context.Context, params *sagemakera2iruntime.StopHumanLoopInput, optFns ...func(*sagemakera2iruntime.Options)) (*sagemakera2iruntime.StopHumanLoopOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopHumanLoop")
	}

	var r0 *sagemakera2iruntime.StopHumanLoopOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakera2iruntime.StopHumanLoopInput, ...func(*sagemakera2iruntime.Options)) (*sagemakera2iruntime.StopHumanLoopOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakera2iruntime.StopHumanLoopInput, ...func(*sagemakera2iruntime.Options)) *sagemakera2iruntime.StopHumanLoopOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemakera2iruntime.StopHumanLoopOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemakera2iruntime.StopHumanLoopInput, ...func(*sagemakera2iruntime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSagemakera2iruntimeClient creates a new instance of Sagemakera2iruntimeClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSagemakera2iruntimeClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Sagemakera2iruntimeClient {
	mock := &Sagemakera2iruntimeClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
