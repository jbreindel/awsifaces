// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	supplychain "github.com/aws/aws-sdk-go-v2/service/supplychain"
)

// SupplychainClient is an autogenerated mock type for the SupplychainClient type
type SupplychainClient struct {
	mock.Mock
}

// CreateBillOfMaterialsImportJob provides a mock function with given fields: ctx, params, optFns
func (_m *SupplychainClient) CreateBillOfMaterialsImportJob(ctx context.Context, params *supplychain.CreateBillOfMaterialsImportJobInput, optFns ...func(*supplychain.Options)) (*supplychain.CreateBillOfMaterialsImportJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBillOfMaterialsImportJob")
	}

	var r0 *supplychain.CreateBillOfMaterialsImportJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *supplychain.CreateBillOfMaterialsImportJobInput, ...func(*supplychain.Options)) (*supplychain.CreateBillOfMaterialsImportJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *supplychain.CreateBillOfMaterialsImportJobInput, ...func(*supplychain.Options)) *supplychain.CreateBillOfMaterialsImportJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*supplychain.CreateBillOfMaterialsImportJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *supplychain.CreateBillOfMaterialsImportJobInput, ...func(*supplychain.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBillOfMaterialsImportJob provides a mock function with given fields: ctx, params, optFns
func (_m *SupplychainClient) GetBillOfMaterialsImportJob(ctx context.Context, params *supplychain.GetBillOfMaterialsImportJobInput, optFns ...func(*supplychain.Options)) (*supplychain.GetBillOfMaterialsImportJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBillOfMaterialsImportJob")
	}

	var r0 *supplychain.GetBillOfMaterialsImportJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *supplychain.GetBillOfMaterialsImportJobInput, ...func(*supplychain.Options)) (*supplychain.GetBillOfMaterialsImportJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *supplychain.GetBillOfMaterialsImportJobInput, ...func(*supplychain.Options)) *supplychain.GetBillOfMaterialsImportJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*supplychain.GetBillOfMaterialsImportJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *supplychain.GetBillOfMaterialsImportJobInput, ...func(*supplychain.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *SupplychainClient) Options() supplychain.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 supplychain.Options
	if rf, ok := ret.Get(0).(func() supplychain.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(supplychain.Options)
	}

	return r0
}

// SendDataIntegrationEvent provides a mock function with given fields: ctx, params, optFns
func (_m *SupplychainClient) SendDataIntegrationEvent(ctx context.Context, params *supplychain.SendDataIntegrationEventInput, optFns ...func(*supplychain.Options)) (*supplychain.SendDataIntegrationEventOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendDataIntegrationEvent")
	}

	var r0 *supplychain.SendDataIntegrationEventOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *supplychain.SendDataIntegrationEventInput, ...func(*supplychain.Options)) (*supplychain.SendDataIntegrationEventOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *supplychain.SendDataIntegrationEventInput, ...func(*supplychain.Options)) *supplychain.SendDataIntegrationEventOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*supplychain.SendDataIntegrationEventOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *supplychain.SendDataIntegrationEventInput, ...func(*supplychain.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSupplychainClient creates a new instance of SupplychainClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSupplychainClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *SupplychainClient {
	mock := &SupplychainClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
