// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	dlm "github.com/aws/aws-sdk-go-v2/service/dlm"
	mock "github.com/stretchr/testify/mock"
)

// DlmClient is an autogenerated mock type for the DlmClient type
type DlmClient struct {
	mock.Mock
}

// CreateLifecyclePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *DlmClient) CreateLifecyclePolicy(ctx context.Context, params *dlm.CreateLifecyclePolicyInput, optFns ...func(*dlm.Options)) (*dlm.CreateLifecyclePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateLifecyclePolicy")
	}

	var r0 *dlm.CreateLifecyclePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dlm.CreateLifecyclePolicyInput, ...func(*dlm.Options)) (*dlm.CreateLifecyclePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dlm.CreateLifecyclePolicyInput, ...func(*dlm.Options)) *dlm.CreateLifecyclePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dlm.CreateLifecyclePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dlm.CreateLifecyclePolicyInput, ...func(*dlm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLifecyclePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *DlmClient) DeleteLifecyclePolicy(ctx context.Context, params *dlm.DeleteLifecyclePolicyInput, optFns ...func(*dlm.Options)) (*dlm.DeleteLifecyclePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLifecyclePolicy")
	}

	var r0 *dlm.DeleteLifecyclePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dlm.DeleteLifecyclePolicyInput, ...func(*dlm.Options)) (*dlm.DeleteLifecyclePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dlm.DeleteLifecyclePolicyInput, ...func(*dlm.Options)) *dlm.DeleteLifecyclePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dlm.DeleteLifecyclePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dlm.DeleteLifecyclePolicyInput, ...func(*dlm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLifecyclePolicies provides a mock function with given fields: ctx, params, optFns
func (_m *DlmClient) GetLifecyclePolicies(ctx context.Context, params *dlm.GetLifecyclePoliciesInput, optFns ...func(*dlm.Options)) (*dlm.GetLifecyclePoliciesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLifecyclePolicies")
	}

	var r0 *dlm.GetLifecyclePoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dlm.GetLifecyclePoliciesInput, ...func(*dlm.Options)) (*dlm.GetLifecyclePoliciesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dlm.GetLifecyclePoliciesInput, ...func(*dlm.Options)) *dlm.GetLifecyclePoliciesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dlm.GetLifecyclePoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dlm.GetLifecyclePoliciesInput, ...func(*dlm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLifecyclePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *DlmClient) GetLifecyclePolicy(ctx context.Context, params *dlm.GetLifecyclePolicyInput, optFns ...func(*dlm.Options)) (*dlm.GetLifecyclePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLifecyclePolicy")
	}

	var r0 *dlm.GetLifecyclePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dlm.GetLifecyclePolicyInput, ...func(*dlm.Options)) (*dlm.GetLifecyclePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dlm.GetLifecyclePolicyInput, ...func(*dlm.Options)) *dlm.GetLifecyclePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dlm.GetLifecyclePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dlm.GetLifecyclePolicyInput, ...func(*dlm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *DlmClient) ListTagsForResource(ctx context.Context, params *dlm.ListTagsForResourceInput, optFns ...func(*dlm.Options)) (*dlm.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *dlm.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dlm.ListTagsForResourceInput, ...func(*dlm.Options)) (*dlm.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dlm.ListTagsForResourceInput, ...func(*dlm.Options)) *dlm.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dlm.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dlm.ListTagsForResourceInput, ...func(*dlm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *DlmClient) Options() dlm.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 dlm.Options
	if rf, ok := ret.Get(0).(func() dlm.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(dlm.Options)
	}

	return r0
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *DlmClient) TagResource(ctx context.Context, params *dlm.TagResourceInput, optFns ...func(*dlm.Options)) (*dlm.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *dlm.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dlm.TagResourceInput, ...func(*dlm.Options)) (*dlm.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dlm.TagResourceInput, ...func(*dlm.Options)) *dlm.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dlm.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dlm.TagResourceInput, ...func(*dlm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *DlmClient) UntagResource(ctx context.Context, params *dlm.UntagResourceInput, optFns ...func(*dlm.Options)) (*dlm.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *dlm.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dlm.UntagResourceInput, ...func(*dlm.Options)) (*dlm.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dlm.UntagResourceInput, ...func(*dlm.Options)) *dlm.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dlm.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dlm.UntagResourceInput, ...func(*dlm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLifecyclePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *DlmClient) UpdateLifecyclePolicy(ctx context.Context, params *dlm.UpdateLifecyclePolicyInput, optFns ...func(*dlm.Options)) (*dlm.UpdateLifecyclePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLifecyclePolicy")
	}

	var r0 *dlm.UpdateLifecyclePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dlm.UpdateLifecyclePolicyInput, ...func(*dlm.Options)) (*dlm.UpdateLifecyclePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dlm.UpdateLifecyclePolicyInput, ...func(*dlm.Options)) *dlm.UpdateLifecyclePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dlm.UpdateLifecyclePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dlm.UpdateLifecyclePolicyInput, ...func(*dlm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDlmClient creates a new instance of DlmClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDlmClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *DlmClient {
	mock := &DlmClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
