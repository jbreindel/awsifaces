// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	kinesisvideosignaling "github.com/aws/aws-sdk-go-v2/service/kinesisvideosignaling"
	mock "github.com/stretchr/testify/mock"
)

// KinesisvideosignalingClient is an autogenerated mock type for the KinesisvideosignalingClient type
type KinesisvideosignalingClient struct {
	mock.Mock
}

// GetIceServerConfig provides a mock function with given fields: ctx, params, optFns
func (_m *KinesisvideosignalingClient) GetIceServerConfig(ctx context.Context, params *kinesisvideosignaling.GetIceServerConfigInput, optFns ...func(*kinesisvideosignaling.Options)) (*kinesisvideosignaling.GetIceServerConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetIceServerConfig")
	}

	var r0 *kinesisvideosignaling.GetIceServerConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideosignaling.GetIceServerConfigInput, ...func(*kinesisvideosignaling.Options)) (*kinesisvideosignaling.GetIceServerConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideosignaling.GetIceServerConfigInput, ...func(*kinesisvideosignaling.Options)) *kinesisvideosignaling.GetIceServerConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisvideosignaling.GetIceServerConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisvideosignaling.GetIceServerConfigInput, ...func(*kinesisvideosignaling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *KinesisvideosignalingClient) Options() kinesisvideosignaling.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 kinesisvideosignaling.Options
	if rf, ok := ret.Get(0).(func() kinesisvideosignaling.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(kinesisvideosignaling.Options)
	}

	return r0
}

// SendAlexaOfferToMaster provides a mock function with given fields: ctx, params, optFns
func (_m *KinesisvideosignalingClient) SendAlexaOfferToMaster(ctx context.Context, params *kinesisvideosignaling.SendAlexaOfferToMasterInput, optFns ...func(*kinesisvideosignaling.Options)) (*kinesisvideosignaling.SendAlexaOfferToMasterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendAlexaOfferToMaster")
	}

	var r0 *kinesisvideosignaling.SendAlexaOfferToMasterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideosignaling.SendAlexaOfferToMasterInput, ...func(*kinesisvideosignaling.Options)) (*kinesisvideosignaling.SendAlexaOfferToMasterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideosignaling.SendAlexaOfferToMasterInput, ...func(*kinesisvideosignaling.Options)) *kinesisvideosignaling.SendAlexaOfferToMasterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisvideosignaling.SendAlexaOfferToMasterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisvideosignaling.SendAlexaOfferToMasterInput, ...func(*kinesisvideosignaling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewKinesisvideosignalingClient creates a new instance of KinesisvideosignalingClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKinesisvideosignalingClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *KinesisvideosignalingClient {
	mock := &KinesisvideosignalingClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
