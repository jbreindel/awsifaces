// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	rdsdata "github.com/aws/aws-sdk-go-v2/service/rdsdata"
	mock "github.com/stretchr/testify/mock"
)

// RdsdataClient is an autogenerated mock type for the RdsdataClient type
type RdsdataClient struct {
	mock.Mock
}

// BatchExecuteStatement provides a mock function with given fields: ctx, params, optFns
func (_m *RdsdataClient) BatchExecuteStatement(ctx context.Context, params *rdsdata.BatchExecuteStatementInput, optFns ...func(*rdsdata.Options)) (*rdsdata.BatchExecuteStatementOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchExecuteStatement")
	}

	var r0 *rdsdata.BatchExecuteStatementOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rdsdata.BatchExecuteStatementInput, ...func(*rdsdata.Options)) (*rdsdata.BatchExecuteStatementOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rdsdata.BatchExecuteStatementInput, ...func(*rdsdata.Options)) *rdsdata.BatchExecuteStatementOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rdsdata.BatchExecuteStatementOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rdsdata.BatchExecuteStatementInput, ...func(*rdsdata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeginTransaction provides a mock function with given fields: ctx, params, optFns
func (_m *RdsdataClient) BeginTransaction(ctx context.Context, params *rdsdata.BeginTransactionInput, optFns ...func(*rdsdata.Options)) (*rdsdata.BeginTransactionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BeginTransaction")
	}

	var r0 *rdsdata.BeginTransactionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rdsdata.BeginTransactionInput, ...func(*rdsdata.Options)) (*rdsdata.BeginTransactionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rdsdata.BeginTransactionInput, ...func(*rdsdata.Options)) *rdsdata.BeginTransactionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rdsdata.BeginTransactionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rdsdata.BeginTransactionInput, ...func(*rdsdata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommitTransaction provides a mock function with given fields: ctx, params, optFns
func (_m *RdsdataClient) CommitTransaction(ctx context.Context, params *rdsdata.CommitTransactionInput, optFns ...func(*rdsdata.Options)) (*rdsdata.CommitTransactionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CommitTransaction")
	}

	var r0 *rdsdata.CommitTransactionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rdsdata.CommitTransactionInput, ...func(*rdsdata.Options)) (*rdsdata.CommitTransactionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rdsdata.CommitTransactionInput, ...func(*rdsdata.Options)) *rdsdata.CommitTransactionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rdsdata.CommitTransactionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rdsdata.CommitTransactionInput, ...func(*rdsdata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteSql provides a mock function with given fields: ctx, params, optFns
func (_m *RdsdataClient) ExecuteSql(ctx context.Context, params *rdsdata.ExecuteSqlInput, optFns ...func(*rdsdata.Options)) (*rdsdata.ExecuteSqlOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteSql")
	}

	var r0 *rdsdata.ExecuteSqlOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rdsdata.ExecuteSqlInput, ...func(*rdsdata.Options)) (*rdsdata.ExecuteSqlOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rdsdata.ExecuteSqlInput, ...func(*rdsdata.Options)) *rdsdata.ExecuteSqlOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rdsdata.ExecuteSqlOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rdsdata.ExecuteSqlInput, ...func(*rdsdata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteStatement provides a mock function with given fields: ctx, params, optFns
func (_m *RdsdataClient) ExecuteStatement(ctx context.Context, params *rdsdata.ExecuteStatementInput, optFns ...func(*rdsdata.Options)) (*rdsdata.ExecuteStatementOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteStatement")
	}

	var r0 *rdsdata.ExecuteStatementOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rdsdata.ExecuteStatementInput, ...func(*rdsdata.Options)) (*rdsdata.ExecuteStatementOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rdsdata.ExecuteStatementInput, ...func(*rdsdata.Options)) *rdsdata.ExecuteStatementOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rdsdata.ExecuteStatementOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rdsdata.ExecuteStatementInput, ...func(*rdsdata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *RdsdataClient) Options() rdsdata.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 rdsdata.Options
	if rf, ok := ret.Get(0).(func() rdsdata.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(rdsdata.Options)
	}

	return r0
}

// RollbackTransaction provides a mock function with given fields: ctx, params, optFns
func (_m *RdsdataClient) RollbackTransaction(ctx context.Context, params *rdsdata.RollbackTransactionInput, optFns ...func(*rdsdata.Options)) (*rdsdata.RollbackTransactionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RollbackTransaction")
	}

	var r0 *rdsdata.RollbackTransactionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rdsdata.RollbackTransactionInput, ...func(*rdsdata.Options)) (*rdsdata.RollbackTransactionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rdsdata.RollbackTransactionInput, ...func(*rdsdata.Options)) *rdsdata.RollbackTransactionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rdsdata.RollbackTransactionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rdsdata.RollbackTransactionInput, ...func(*rdsdata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRdsdataClient creates a new instance of RdsdataClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRdsdataClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *RdsdataClient {
	mock := &RdsdataClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
