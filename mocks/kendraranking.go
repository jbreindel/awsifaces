// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	kendraranking "github.com/aws/aws-sdk-go-v2/service/kendraranking"
	mock "github.com/stretchr/testify/mock"
)

// KendrarankingClient is an autogenerated mock type for the KendrarankingClient type
type KendrarankingClient struct {
	mock.Mock
}

// CreateRescoreExecutionPlan provides a mock function with given fields: ctx, params, optFns
func (_m *KendrarankingClient) CreateRescoreExecutionPlan(ctx context.Context, params *kendraranking.CreateRescoreExecutionPlanInput, optFns ...func(*kendraranking.Options)) (*kendraranking.CreateRescoreExecutionPlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRescoreExecutionPlan")
	}

	var r0 *kendraranking.CreateRescoreExecutionPlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kendraranking.CreateRescoreExecutionPlanInput, ...func(*kendraranking.Options)) (*kendraranking.CreateRescoreExecutionPlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kendraranking.CreateRescoreExecutionPlanInput, ...func(*kendraranking.Options)) *kendraranking.CreateRescoreExecutionPlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kendraranking.CreateRescoreExecutionPlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kendraranking.CreateRescoreExecutionPlanInput, ...func(*kendraranking.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRescoreExecutionPlan provides a mock function with given fields: ctx, params, optFns
func (_m *KendrarankingClient) DeleteRescoreExecutionPlan(ctx context.Context, params *kendraranking.DeleteRescoreExecutionPlanInput, optFns ...func(*kendraranking.Options)) (*kendraranking.DeleteRescoreExecutionPlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRescoreExecutionPlan")
	}

	var r0 *kendraranking.DeleteRescoreExecutionPlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kendraranking.DeleteRescoreExecutionPlanInput, ...func(*kendraranking.Options)) (*kendraranking.DeleteRescoreExecutionPlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kendraranking.DeleteRescoreExecutionPlanInput, ...func(*kendraranking.Options)) *kendraranking.DeleteRescoreExecutionPlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kendraranking.DeleteRescoreExecutionPlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kendraranking.DeleteRescoreExecutionPlanInput, ...func(*kendraranking.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRescoreExecutionPlan provides a mock function with given fields: ctx, params, optFns
func (_m *KendrarankingClient) DescribeRescoreExecutionPlan(ctx context.Context, params *kendraranking.DescribeRescoreExecutionPlanInput, optFns ...func(*kendraranking.Options)) (*kendraranking.DescribeRescoreExecutionPlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeRescoreExecutionPlan")
	}

	var r0 *kendraranking.DescribeRescoreExecutionPlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kendraranking.DescribeRescoreExecutionPlanInput, ...func(*kendraranking.Options)) (*kendraranking.DescribeRescoreExecutionPlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kendraranking.DescribeRescoreExecutionPlanInput, ...func(*kendraranking.Options)) *kendraranking.DescribeRescoreExecutionPlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kendraranking.DescribeRescoreExecutionPlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kendraranking.DescribeRescoreExecutionPlanInput, ...func(*kendraranking.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRescoreExecutionPlans provides a mock function with given fields: ctx, params, optFns
func (_m *KendrarankingClient) ListRescoreExecutionPlans(ctx context.Context, params *kendraranking.ListRescoreExecutionPlansInput, optFns ...func(*kendraranking.Options)) (*kendraranking.ListRescoreExecutionPlansOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRescoreExecutionPlans")
	}

	var r0 *kendraranking.ListRescoreExecutionPlansOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kendraranking.ListRescoreExecutionPlansInput, ...func(*kendraranking.Options)) (*kendraranking.ListRescoreExecutionPlansOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kendraranking.ListRescoreExecutionPlansInput, ...func(*kendraranking.Options)) *kendraranking.ListRescoreExecutionPlansOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kendraranking.ListRescoreExecutionPlansOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kendraranking.ListRescoreExecutionPlansInput, ...func(*kendraranking.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *KendrarankingClient) ListTagsForResource(ctx context.Context, params *kendraranking.ListTagsForResourceInput, optFns ...func(*kendraranking.Options)) (*kendraranking.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *kendraranking.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kendraranking.ListTagsForResourceInput, ...func(*kendraranking.Options)) (*kendraranking.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kendraranking.ListTagsForResourceInput, ...func(*kendraranking.Options)) *kendraranking.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kendraranking.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kendraranking.ListTagsForResourceInput, ...func(*kendraranking.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *KendrarankingClient) Options() kendraranking.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 kendraranking.Options
	if rf, ok := ret.Get(0).(func() kendraranking.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(kendraranking.Options)
	}

	return r0
}

// Rescore provides a mock function with given fields: ctx, params, optFns
func (_m *KendrarankingClient) Rescore(ctx context.Context, params *kendraranking.RescoreInput, optFns ...func(*kendraranking.Options)) (*kendraranking.RescoreOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Rescore")
	}

	var r0 *kendraranking.RescoreOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kendraranking.RescoreInput, ...func(*kendraranking.Options)) (*kendraranking.RescoreOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kendraranking.RescoreInput, ...func(*kendraranking.Options)) *kendraranking.RescoreOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kendraranking.RescoreOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kendraranking.RescoreInput, ...func(*kendraranking.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *KendrarankingClient) TagResource(ctx context.Context, params *kendraranking.TagResourceInput, optFns ...func(*kendraranking.Options)) (*kendraranking.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *kendraranking.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kendraranking.TagResourceInput, ...func(*kendraranking.Options)) (*kendraranking.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kendraranking.TagResourceInput, ...func(*kendraranking.Options)) *kendraranking.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kendraranking.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kendraranking.TagResourceInput, ...func(*kendraranking.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *KendrarankingClient) UntagResource(ctx context.Context, params *kendraranking.UntagResourceInput, optFns ...func(*kendraranking.Options)) (*kendraranking.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *kendraranking.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kendraranking.UntagResourceInput, ...func(*kendraranking.Options)) (*kendraranking.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kendraranking.UntagResourceInput, ...func(*kendraranking.Options)) *kendraranking.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kendraranking.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kendraranking.UntagResourceInput, ...func(*kendraranking.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRescoreExecutionPlan provides a mock function with given fields: ctx, params, optFns
func (_m *KendrarankingClient) UpdateRescoreExecutionPlan(ctx context.Context, params *kendraranking.UpdateRescoreExecutionPlanInput, optFns ...func(*kendraranking.Options)) (*kendraranking.UpdateRescoreExecutionPlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRescoreExecutionPlan")
	}

	var r0 *kendraranking.UpdateRescoreExecutionPlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kendraranking.UpdateRescoreExecutionPlanInput, ...func(*kendraranking.Options)) (*kendraranking.UpdateRescoreExecutionPlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kendraranking.UpdateRescoreExecutionPlanInput, ...func(*kendraranking.Options)) *kendraranking.UpdateRescoreExecutionPlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kendraranking.UpdateRescoreExecutionPlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kendraranking.UpdateRescoreExecutionPlanInput, ...func(*kendraranking.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewKendrarankingClient creates a new instance of KendrarankingClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKendrarankingClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *KendrarankingClient {
	mock := &KendrarankingClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
