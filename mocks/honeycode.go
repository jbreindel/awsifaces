// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	honeycode "github.com/aws/aws-sdk-go-v2/service/honeycode"
	mock "github.com/stretchr/testify/mock"
)

// HoneycodeClient is an autogenerated mock type for the HoneycodeClient type
type HoneycodeClient struct {
	mock.Mock
}

// BatchCreateTableRows provides a mock function with given fields: ctx, params, optFns
func (_m *HoneycodeClient) BatchCreateTableRows(ctx context.Context, params *honeycode.BatchCreateTableRowsInput, optFns ...func(*honeycode.Options)) (*honeycode.BatchCreateTableRowsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchCreateTableRows")
	}

	var r0 *honeycode.BatchCreateTableRowsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *honeycode.BatchCreateTableRowsInput, ...func(*honeycode.Options)) (*honeycode.BatchCreateTableRowsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *honeycode.BatchCreateTableRowsInput, ...func(*honeycode.Options)) *honeycode.BatchCreateTableRowsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*honeycode.BatchCreateTableRowsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *honeycode.BatchCreateTableRowsInput, ...func(*honeycode.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchDeleteTableRows provides a mock function with given fields: ctx, params, optFns
func (_m *HoneycodeClient) BatchDeleteTableRows(ctx context.Context, params *honeycode.BatchDeleteTableRowsInput, optFns ...func(*honeycode.Options)) (*honeycode.BatchDeleteTableRowsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchDeleteTableRows")
	}

	var r0 *honeycode.BatchDeleteTableRowsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *honeycode.BatchDeleteTableRowsInput, ...func(*honeycode.Options)) (*honeycode.BatchDeleteTableRowsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *honeycode.BatchDeleteTableRowsInput, ...func(*honeycode.Options)) *honeycode.BatchDeleteTableRowsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*honeycode.BatchDeleteTableRowsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *honeycode.BatchDeleteTableRowsInput, ...func(*honeycode.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchUpdateTableRows provides a mock function with given fields: ctx, params, optFns
func (_m *HoneycodeClient) BatchUpdateTableRows(ctx context.Context, params *honeycode.BatchUpdateTableRowsInput, optFns ...func(*honeycode.Options)) (*honeycode.BatchUpdateTableRowsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchUpdateTableRows")
	}

	var r0 *honeycode.BatchUpdateTableRowsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *honeycode.BatchUpdateTableRowsInput, ...func(*honeycode.Options)) (*honeycode.BatchUpdateTableRowsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *honeycode.BatchUpdateTableRowsInput, ...func(*honeycode.Options)) *honeycode.BatchUpdateTableRowsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*honeycode.BatchUpdateTableRowsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *honeycode.BatchUpdateTableRowsInput, ...func(*honeycode.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchUpsertTableRows provides a mock function with given fields: ctx, params, optFns
func (_m *HoneycodeClient) BatchUpsertTableRows(ctx context.Context, params *honeycode.BatchUpsertTableRowsInput, optFns ...func(*honeycode.Options)) (*honeycode.BatchUpsertTableRowsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchUpsertTableRows")
	}

	var r0 *honeycode.BatchUpsertTableRowsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *honeycode.BatchUpsertTableRowsInput, ...func(*honeycode.Options)) (*honeycode.BatchUpsertTableRowsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *honeycode.BatchUpsertTableRowsInput, ...func(*honeycode.Options)) *honeycode.BatchUpsertTableRowsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*honeycode.BatchUpsertTableRowsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *honeycode.BatchUpsertTableRowsInput, ...func(*honeycode.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTableDataImportJob provides a mock function with given fields: ctx, params, optFns
func (_m *HoneycodeClient) DescribeTableDataImportJob(ctx context.Context, params *honeycode.DescribeTableDataImportJobInput, optFns ...func(*honeycode.Options)) (*honeycode.DescribeTableDataImportJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeTableDataImportJob")
	}

	var r0 *honeycode.DescribeTableDataImportJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *honeycode.DescribeTableDataImportJobInput, ...func(*honeycode.Options)) (*honeycode.DescribeTableDataImportJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *honeycode.DescribeTableDataImportJobInput, ...func(*honeycode.Options)) *honeycode.DescribeTableDataImportJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*honeycode.DescribeTableDataImportJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *honeycode.DescribeTableDataImportJobInput, ...func(*honeycode.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetScreenData provides a mock function with given fields: ctx, params, optFns
func (_m *HoneycodeClient) GetScreenData(ctx context.Context, params *honeycode.GetScreenDataInput, optFns ...func(*honeycode.Options)) (*honeycode.GetScreenDataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetScreenData")
	}

	var r0 *honeycode.GetScreenDataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *honeycode.GetScreenDataInput, ...func(*honeycode.Options)) (*honeycode.GetScreenDataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *honeycode.GetScreenDataInput, ...func(*honeycode.Options)) *honeycode.GetScreenDataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*honeycode.GetScreenDataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *honeycode.GetScreenDataInput, ...func(*honeycode.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvokeScreenAutomation provides a mock function with given fields: ctx, params, optFns
func (_m *HoneycodeClient) InvokeScreenAutomation(ctx context.Context, params *honeycode.InvokeScreenAutomationInput, optFns ...func(*honeycode.Options)) (*honeycode.InvokeScreenAutomationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InvokeScreenAutomation")
	}

	var r0 *honeycode.InvokeScreenAutomationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *honeycode.InvokeScreenAutomationInput, ...func(*honeycode.Options)) (*honeycode.InvokeScreenAutomationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *honeycode.InvokeScreenAutomationInput, ...func(*honeycode.Options)) *honeycode.InvokeScreenAutomationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*honeycode.InvokeScreenAutomationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *honeycode.InvokeScreenAutomationInput, ...func(*honeycode.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTableColumns provides a mock function with given fields: ctx, params, optFns
func (_m *HoneycodeClient) ListTableColumns(ctx context.Context, params *honeycode.ListTableColumnsInput, optFns ...func(*honeycode.Options)) (*honeycode.ListTableColumnsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTableColumns")
	}

	var r0 *honeycode.ListTableColumnsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *honeycode.ListTableColumnsInput, ...func(*honeycode.Options)) (*honeycode.ListTableColumnsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *honeycode.ListTableColumnsInput, ...func(*honeycode.Options)) *honeycode.ListTableColumnsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*honeycode.ListTableColumnsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *honeycode.ListTableColumnsInput, ...func(*honeycode.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTableRows provides a mock function with given fields: ctx, params, optFns
func (_m *HoneycodeClient) ListTableRows(ctx context.Context, params *honeycode.ListTableRowsInput, optFns ...func(*honeycode.Options)) (*honeycode.ListTableRowsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTableRows")
	}

	var r0 *honeycode.ListTableRowsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *honeycode.ListTableRowsInput, ...func(*honeycode.Options)) (*honeycode.ListTableRowsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *honeycode.ListTableRowsInput, ...func(*honeycode.Options)) *honeycode.ListTableRowsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*honeycode.ListTableRowsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *honeycode.ListTableRowsInput, ...func(*honeycode.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTables provides a mock function with given fields: ctx, params, optFns
func (_m *HoneycodeClient) ListTables(ctx context.Context, params *honeycode.ListTablesInput, optFns ...func(*honeycode.Options)) (*honeycode.ListTablesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTables")
	}

	var r0 *honeycode.ListTablesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *honeycode.ListTablesInput, ...func(*honeycode.Options)) (*honeycode.ListTablesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *honeycode.ListTablesInput, ...func(*honeycode.Options)) *honeycode.ListTablesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*honeycode.ListTablesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *honeycode.ListTablesInput, ...func(*honeycode.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *HoneycodeClient) ListTagsForResource(ctx context.Context, params *honeycode.ListTagsForResourceInput, optFns ...func(*honeycode.Options)) (*honeycode.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *honeycode.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *honeycode.ListTagsForResourceInput, ...func(*honeycode.Options)) (*honeycode.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *honeycode.ListTagsForResourceInput, ...func(*honeycode.Options)) *honeycode.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*honeycode.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *honeycode.ListTagsForResourceInput, ...func(*honeycode.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *HoneycodeClient) Options() honeycode.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 honeycode.Options
	if rf, ok := ret.Get(0).(func() honeycode.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(honeycode.Options)
	}

	return r0
}

// QueryTableRows provides a mock function with given fields: ctx, params, optFns
func (_m *HoneycodeClient) QueryTableRows(ctx context.Context, params *honeycode.QueryTableRowsInput, optFns ...func(*honeycode.Options)) (*honeycode.QueryTableRowsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for QueryTableRows")
	}

	var r0 *honeycode.QueryTableRowsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *honeycode.QueryTableRowsInput, ...func(*honeycode.Options)) (*honeycode.QueryTableRowsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *honeycode.QueryTableRowsInput, ...func(*honeycode.Options)) *honeycode.QueryTableRowsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*honeycode.QueryTableRowsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *honeycode.QueryTableRowsInput, ...func(*honeycode.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartTableDataImportJob provides a mock function with given fields: ctx, params, optFns
func (_m *HoneycodeClient) StartTableDataImportJob(ctx context.Context, params *honeycode.StartTableDataImportJobInput, optFns ...func(*honeycode.Options)) (*honeycode.StartTableDataImportJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartTableDataImportJob")
	}

	var r0 *honeycode.StartTableDataImportJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *honeycode.StartTableDataImportJobInput, ...func(*honeycode.Options)) (*honeycode.StartTableDataImportJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *honeycode.StartTableDataImportJobInput, ...func(*honeycode.Options)) *honeycode.StartTableDataImportJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*honeycode.StartTableDataImportJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *honeycode.StartTableDataImportJobInput, ...func(*honeycode.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *HoneycodeClient) TagResource(ctx context.Context, params *honeycode.TagResourceInput, optFns ...func(*honeycode.Options)) (*honeycode.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *honeycode.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *honeycode.TagResourceInput, ...func(*honeycode.Options)) (*honeycode.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *honeycode.TagResourceInput, ...func(*honeycode.Options)) *honeycode.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*honeycode.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *honeycode.TagResourceInput, ...func(*honeycode.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *HoneycodeClient) UntagResource(ctx context.Context, params *honeycode.UntagResourceInput, optFns ...func(*honeycode.Options)) (*honeycode.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *honeycode.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *honeycode.UntagResourceInput, ...func(*honeycode.Options)) (*honeycode.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *honeycode.UntagResourceInput, ...func(*honeycode.Options)) *honeycode.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*honeycode.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *honeycode.UntagResourceInput, ...func(*honeycode.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewHoneycodeClient creates a new instance of HoneycodeClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHoneycodeClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *HoneycodeClient {
	mock := &HoneycodeClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
