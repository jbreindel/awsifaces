// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	controltower "github.com/aws/aws-sdk-go-v2/service/controltower"
	mock "github.com/stretchr/testify/mock"
)

// ControltowerClient is an autogenerated mock type for the ControltowerClient type
type ControltowerClient struct {
	mock.Mock
}

// CreateLandingZone provides a mock function with given fields: ctx, params, optFns
func (_m *ControltowerClient) CreateLandingZone(ctx context.Context, params *controltower.CreateLandingZoneInput, optFns ...func(*controltower.Options)) (*controltower.CreateLandingZoneOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateLandingZone")
	}

	var r0 *controltower.CreateLandingZoneOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.CreateLandingZoneInput, ...func(*controltower.Options)) (*controltower.CreateLandingZoneOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.CreateLandingZoneInput, ...func(*controltower.Options)) *controltower.CreateLandingZoneOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*controltower.CreateLandingZoneOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *controltower.CreateLandingZoneInput, ...func(*controltower.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLandingZone provides a mock function with given fields: ctx, params, optFns
func (_m *ControltowerClient) DeleteLandingZone(ctx context.Context, params *controltower.DeleteLandingZoneInput, optFns ...func(*controltower.Options)) (*controltower.DeleteLandingZoneOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLandingZone")
	}

	var r0 *controltower.DeleteLandingZoneOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.DeleteLandingZoneInput, ...func(*controltower.Options)) (*controltower.DeleteLandingZoneOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.DeleteLandingZoneInput, ...func(*controltower.Options)) *controltower.DeleteLandingZoneOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*controltower.DeleteLandingZoneOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *controltower.DeleteLandingZoneInput, ...func(*controltower.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableBaseline provides a mock function with given fields: ctx, params, optFns
func (_m *ControltowerClient) DisableBaseline(ctx context.Context, params *controltower.DisableBaselineInput, optFns ...func(*controltower.Options)) (*controltower.DisableBaselineOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisableBaseline")
	}

	var r0 *controltower.DisableBaselineOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.DisableBaselineInput, ...func(*controltower.Options)) (*controltower.DisableBaselineOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.DisableBaselineInput, ...func(*controltower.Options)) *controltower.DisableBaselineOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*controltower.DisableBaselineOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *controltower.DisableBaselineInput, ...func(*controltower.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableControl provides a mock function with given fields: ctx, params, optFns
func (_m *ControltowerClient) DisableControl(ctx context.Context, params *controltower.DisableControlInput, optFns ...func(*controltower.Options)) (*controltower.DisableControlOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisableControl")
	}

	var r0 *controltower.DisableControlOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.DisableControlInput, ...func(*controltower.Options)) (*controltower.DisableControlOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.DisableControlInput, ...func(*controltower.Options)) *controltower.DisableControlOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*controltower.DisableControlOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *controltower.DisableControlInput, ...func(*controltower.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableBaseline provides a mock function with given fields: ctx, params, optFns
func (_m *ControltowerClient) EnableBaseline(ctx context.Context, params *controltower.EnableBaselineInput, optFns ...func(*controltower.Options)) (*controltower.EnableBaselineOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnableBaseline")
	}

	var r0 *controltower.EnableBaselineOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.EnableBaselineInput, ...func(*controltower.Options)) (*controltower.EnableBaselineOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.EnableBaselineInput, ...func(*controltower.Options)) *controltower.EnableBaselineOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*controltower.EnableBaselineOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *controltower.EnableBaselineInput, ...func(*controltower.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableControl provides a mock function with given fields: ctx, params, optFns
func (_m *ControltowerClient) EnableControl(ctx context.Context, params *controltower.EnableControlInput, optFns ...func(*controltower.Options)) (*controltower.EnableControlOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnableControl")
	}

	var r0 *controltower.EnableControlOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.EnableControlInput, ...func(*controltower.Options)) (*controltower.EnableControlOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.EnableControlInput, ...func(*controltower.Options)) *controltower.EnableControlOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*controltower.EnableControlOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *controltower.EnableControlInput, ...func(*controltower.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBaseline provides a mock function with given fields: ctx, params, optFns
func (_m *ControltowerClient) GetBaseline(ctx context.Context, params *controltower.GetBaselineInput, optFns ...func(*controltower.Options)) (*controltower.GetBaselineOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBaseline")
	}

	var r0 *controltower.GetBaselineOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.GetBaselineInput, ...func(*controltower.Options)) (*controltower.GetBaselineOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.GetBaselineInput, ...func(*controltower.Options)) *controltower.GetBaselineOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*controltower.GetBaselineOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *controltower.GetBaselineInput, ...func(*controltower.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBaselineOperation provides a mock function with given fields: ctx, params, optFns
func (_m *ControltowerClient) GetBaselineOperation(ctx context.Context, params *controltower.GetBaselineOperationInput, optFns ...func(*controltower.Options)) (*controltower.GetBaselineOperationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBaselineOperation")
	}

	var r0 *controltower.GetBaselineOperationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.GetBaselineOperationInput, ...func(*controltower.Options)) (*controltower.GetBaselineOperationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.GetBaselineOperationInput, ...func(*controltower.Options)) *controltower.GetBaselineOperationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*controltower.GetBaselineOperationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *controltower.GetBaselineOperationInput, ...func(*controltower.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetControlOperation provides a mock function with given fields: ctx, params, optFns
func (_m *ControltowerClient) GetControlOperation(ctx context.Context, params *controltower.GetControlOperationInput, optFns ...func(*controltower.Options)) (*controltower.GetControlOperationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetControlOperation")
	}

	var r0 *controltower.GetControlOperationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.GetControlOperationInput, ...func(*controltower.Options)) (*controltower.GetControlOperationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.GetControlOperationInput, ...func(*controltower.Options)) *controltower.GetControlOperationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*controltower.GetControlOperationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *controltower.GetControlOperationInput, ...func(*controltower.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEnabledBaseline provides a mock function with given fields: ctx, params, optFns
func (_m *ControltowerClient) GetEnabledBaseline(ctx context.Context, params *controltower.GetEnabledBaselineInput, optFns ...func(*controltower.Options)) (*controltower.GetEnabledBaselineOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEnabledBaseline")
	}

	var r0 *controltower.GetEnabledBaselineOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.GetEnabledBaselineInput, ...func(*controltower.Options)) (*controltower.GetEnabledBaselineOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.GetEnabledBaselineInput, ...func(*controltower.Options)) *controltower.GetEnabledBaselineOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*controltower.GetEnabledBaselineOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *controltower.GetEnabledBaselineInput, ...func(*controltower.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEnabledControl provides a mock function with given fields: ctx, params, optFns
func (_m *ControltowerClient) GetEnabledControl(ctx context.Context, params *controltower.GetEnabledControlInput, optFns ...func(*controltower.Options)) (*controltower.GetEnabledControlOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEnabledControl")
	}

	var r0 *controltower.GetEnabledControlOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.GetEnabledControlInput, ...func(*controltower.Options)) (*controltower.GetEnabledControlOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.GetEnabledControlInput, ...func(*controltower.Options)) *controltower.GetEnabledControlOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*controltower.GetEnabledControlOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *controltower.GetEnabledControlInput, ...func(*controltower.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLandingZone provides a mock function with given fields: ctx, params, optFns
func (_m *ControltowerClient) GetLandingZone(ctx context.Context, params *controltower.GetLandingZoneInput, optFns ...func(*controltower.Options)) (*controltower.GetLandingZoneOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLandingZone")
	}

	var r0 *controltower.GetLandingZoneOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.GetLandingZoneInput, ...func(*controltower.Options)) (*controltower.GetLandingZoneOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.GetLandingZoneInput, ...func(*controltower.Options)) *controltower.GetLandingZoneOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*controltower.GetLandingZoneOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *controltower.GetLandingZoneInput, ...func(*controltower.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLandingZoneOperation provides a mock function with given fields: ctx, params, optFns
func (_m *ControltowerClient) GetLandingZoneOperation(ctx context.Context, params *controltower.GetLandingZoneOperationInput, optFns ...func(*controltower.Options)) (*controltower.GetLandingZoneOperationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLandingZoneOperation")
	}

	var r0 *controltower.GetLandingZoneOperationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.GetLandingZoneOperationInput, ...func(*controltower.Options)) (*controltower.GetLandingZoneOperationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.GetLandingZoneOperationInput, ...func(*controltower.Options)) *controltower.GetLandingZoneOperationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*controltower.GetLandingZoneOperationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *controltower.GetLandingZoneOperationInput, ...func(*controltower.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBaselines provides a mock function with given fields: ctx, params, optFns
func (_m *ControltowerClient) ListBaselines(ctx context.Context, params *controltower.ListBaselinesInput, optFns ...func(*controltower.Options)) (*controltower.ListBaselinesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBaselines")
	}

	var r0 *controltower.ListBaselinesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.ListBaselinesInput, ...func(*controltower.Options)) (*controltower.ListBaselinesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.ListBaselinesInput, ...func(*controltower.Options)) *controltower.ListBaselinesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*controltower.ListBaselinesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *controltower.ListBaselinesInput, ...func(*controltower.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEnabledBaselines provides a mock function with given fields: ctx, params, optFns
func (_m *ControltowerClient) ListEnabledBaselines(ctx context.Context, params *controltower.ListEnabledBaselinesInput, optFns ...func(*controltower.Options)) (*controltower.ListEnabledBaselinesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEnabledBaselines")
	}

	var r0 *controltower.ListEnabledBaselinesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.ListEnabledBaselinesInput, ...func(*controltower.Options)) (*controltower.ListEnabledBaselinesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.ListEnabledBaselinesInput, ...func(*controltower.Options)) *controltower.ListEnabledBaselinesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*controltower.ListEnabledBaselinesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *controltower.ListEnabledBaselinesInput, ...func(*controltower.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEnabledControls provides a mock function with given fields: ctx, params, optFns
func (_m *ControltowerClient) ListEnabledControls(ctx context.Context, params *controltower.ListEnabledControlsInput, optFns ...func(*controltower.Options)) (*controltower.ListEnabledControlsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEnabledControls")
	}

	var r0 *controltower.ListEnabledControlsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.ListEnabledControlsInput, ...func(*controltower.Options)) (*controltower.ListEnabledControlsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.ListEnabledControlsInput, ...func(*controltower.Options)) *controltower.ListEnabledControlsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*controltower.ListEnabledControlsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *controltower.ListEnabledControlsInput, ...func(*controltower.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLandingZones provides a mock function with given fields: ctx, params, optFns
func (_m *ControltowerClient) ListLandingZones(ctx context.Context, params *controltower.ListLandingZonesInput, optFns ...func(*controltower.Options)) (*controltower.ListLandingZonesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLandingZones")
	}

	var r0 *controltower.ListLandingZonesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.ListLandingZonesInput, ...func(*controltower.Options)) (*controltower.ListLandingZonesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.ListLandingZonesInput, ...func(*controltower.Options)) *controltower.ListLandingZonesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*controltower.ListLandingZonesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *controltower.ListLandingZonesInput, ...func(*controltower.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *ControltowerClient) ListTagsForResource(ctx context.Context, params *controltower.ListTagsForResourceInput, optFns ...func(*controltower.Options)) (*controltower.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *controltower.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.ListTagsForResourceInput, ...func(*controltower.Options)) (*controltower.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.ListTagsForResourceInput, ...func(*controltower.Options)) *controltower.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*controltower.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *controltower.ListTagsForResourceInput, ...func(*controltower.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *ControltowerClient) Options() controltower.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 controltower.Options
	if rf, ok := ret.Get(0).(func() controltower.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(controltower.Options)
	}

	return r0
}

// ResetEnabledBaseline provides a mock function with given fields: ctx, params, optFns
func (_m *ControltowerClient) ResetEnabledBaseline(ctx context.Context, params *controltower.ResetEnabledBaselineInput, optFns ...func(*controltower.Options)) (*controltower.ResetEnabledBaselineOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ResetEnabledBaseline")
	}

	var r0 *controltower.ResetEnabledBaselineOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.ResetEnabledBaselineInput, ...func(*controltower.Options)) (*controltower.ResetEnabledBaselineOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.ResetEnabledBaselineInput, ...func(*controltower.Options)) *controltower.ResetEnabledBaselineOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*controltower.ResetEnabledBaselineOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *controltower.ResetEnabledBaselineInput, ...func(*controltower.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetLandingZone provides a mock function with given fields: ctx, params, optFns
func (_m *ControltowerClient) ResetLandingZone(ctx context.Context, params *controltower.ResetLandingZoneInput, optFns ...func(*controltower.Options)) (*controltower.ResetLandingZoneOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ResetLandingZone")
	}

	var r0 *controltower.ResetLandingZoneOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.ResetLandingZoneInput, ...func(*controltower.Options)) (*controltower.ResetLandingZoneOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.ResetLandingZoneInput, ...func(*controltower.Options)) *controltower.ResetLandingZoneOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*controltower.ResetLandingZoneOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *controltower.ResetLandingZoneInput, ...func(*controltower.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *ControltowerClient) TagResource(ctx context.Context, params *controltower.TagResourceInput, optFns ...func(*controltower.Options)) (*controltower.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *controltower.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.TagResourceInput, ...func(*controltower.Options)) (*controltower.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.TagResourceInput, ...func(*controltower.Options)) *controltower.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*controltower.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *controltower.TagResourceInput, ...func(*controltower.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *ControltowerClient) UntagResource(ctx context.Context, params *controltower.UntagResourceInput, optFns ...func(*controltower.Options)) (*controltower.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *controltower.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.UntagResourceInput, ...func(*controltower.Options)) (*controltower.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.UntagResourceInput, ...func(*controltower.Options)) *controltower.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*controltower.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *controltower.UntagResourceInput, ...func(*controltower.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEnabledBaseline provides a mock function with given fields: ctx, params, optFns
func (_m *ControltowerClient) UpdateEnabledBaseline(ctx context.Context, params *controltower.UpdateEnabledBaselineInput, optFns ...func(*controltower.Options)) (*controltower.UpdateEnabledBaselineOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEnabledBaseline")
	}

	var r0 *controltower.UpdateEnabledBaselineOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.UpdateEnabledBaselineInput, ...func(*controltower.Options)) (*controltower.UpdateEnabledBaselineOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.UpdateEnabledBaselineInput, ...func(*controltower.Options)) *controltower.UpdateEnabledBaselineOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*controltower.UpdateEnabledBaselineOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *controltower.UpdateEnabledBaselineInput, ...func(*controltower.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEnabledControl provides a mock function with given fields: ctx, params, optFns
func (_m *ControltowerClient) UpdateEnabledControl(ctx context.Context, params *controltower.UpdateEnabledControlInput, optFns ...func(*controltower.Options)) (*controltower.UpdateEnabledControlOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEnabledControl")
	}

	var r0 *controltower.UpdateEnabledControlOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.UpdateEnabledControlInput, ...func(*controltower.Options)) (*controltower.UpdateEnabledControlOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.UpdateEnabledControlInput, ...func(*controltower.Options)) *controltower.UpdateEnabledControlOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*controltower.UpdateEnabledControlOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *controltower.UpdateEnabledControlInput, ...func(*controltower.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLandingZone provides a mock function with given fields: ctx, params, optFns
func (_m *ControltowerClient) UpdateLandingZone(ctx context.Context, params *controltower.UpdateLandingZoneInput, optFns ...func(*controltower.Options)) (*controltower.UpdateLandingZoneOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLandingZone")
	}

	var r0 *controltower.UpdateLandingZoneOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.UpdateLandingZoneInput, ...func(*controltower.Options)) (*controltower.UpdateLandingZoneOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *controltower.UpdateLandingZoneInput, ...func(*controltower.Options)) *controltower.UpdateLandingZoneOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*controltower.UpdateLandingZoneOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *controltower.UpdateLandingZoneInput, ...func(*controltower.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewControltowerClient creates a new instance of ControltowerClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewControltowerClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ControltowerClient {
	mock := &ControltowerClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
