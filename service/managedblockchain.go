// Code generated by ifacemaker; DO NOT EDIT.

package service

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/service/managedblockchain"
)

// ManagedblockchainClient ...
type ManagedblockchainClient interface {
	Options() managedblockchain.Options
	CreateAccessor(ctx context.Context, params *managedblockchain.CreateAccessorInput, optFns ...func(*managedblockchain.Options)) (*managedblockchain.CreateAccessorOutput, error)
	CreateMember(ctx context.Context, params *managedblockchain.CreateMemberInput, optFns ...func(*managedblockchain.Options)) (*managedblockchain.CreateMemberOutput, error)
	CreateNetwork(ctx context.Context, params *managedblockchain.CreateNetworkInput, optFns ...func(*managedblockchain.Options)) (*managedblockchain.CreateNetworkOutput, error)
	CreateNode(ctx context.Context, params *managedblockchain.CreateNodeInput, optFns ...func(*managedblockchain.Options)) (*managedblockchain.CreateNodeOutput, error)
	CreateProposal(ctx context.Context, params *managedblockchain.CreateProposalInput, optFns ...func(*managedblockchain.Options)) (*managedblockchain.CreateProposalOutput, error)
	DeleteAccessor(ctx context.Context, params *managedblockchain.DeleteAccessorInput, optFns ...func(*managedblockchain.Options)) (*managedblockchain.DeleteAccessorOutput, error)
	DeleteMember(ctx context.Context, params *managedblockchain.DeleteMemberInput, optFns ...func(*managedblockchain.Options)) (*managedblockchain.DeleteMemberOutput, error)
	DeleteNode(ctx context.Context, params *managedblockchain.DeleteNodeInput, optFns ...func(*managedblockchain.Options)) (*managedblockchain.DeleteNodeOutput, error)
	GetAccessor(ctx context.Context, params *managedblockchain.GetAccessorInput, optFns ...func(*managedblockchain.Options)) (*managedblockchain.GetAccessorOutput, error)
	GetMember(ctx context.Context, params *managedblockchain.GetMemberInput, optFns ...func(*managedblockchain.Options)) (*managedblockchain.GetMemberOutput, error)
	GetNetwork(ctx context.Context, params *managedblockchain.GetNetworkInput, optFns ...func(*managedblockchain.Options)) (*managedblockchain.GetNetworkOutput, error)
	GetNode(ctx context.Context, params *managedblockchain.GetNodeInput, optFns ...func(*managedblockchain.Options)) (*managedblockchain.GetNodeOutput, error)
	GetProposal(ctx context.Context, params *managedblockchain.GetProposalInput, optFns ...func(*managedblockchain.Options)) (*managedblockchain.GetProposalOutput, error)
	ListAccessors(ctx context.Context, params *managedblockchain.ListAccessorsInput, optFns ...func(*managedblockchain.Options)) (*managedblockchain.ListAccessorsOutput, error)
	ListInvitations(ctx context.Context, params *managedblockchain.ListInvitationsInput, optFns ...func(*managedblockchain.Options)) (*managedblockchain.ListInvitationsOutput, error)
	ListMembers(ctx context.Context, params *managedblockchain.ListMembersInput, optFns ...func(*managedblockchain.Options)) (*managedblockchain.ListMembersOutput, error)
	ListNetworks(ctx context.Context, params *managedblockchain.ListNetworksInput, optFns ...func(*managedblockchain.Options)) (*managedblockchain.ListNetworksOutput, error)
	ListNodes(ctx context.Context, params *managedblockchain.ListNodesInput, optFns ...func(*managedblockchain.Options)) (*managedblockchain.ListNodesOutput, error)
	ListProposalVotes(ctx context.Context, params *managedblockchain.ListProposalVotesInput, optFns ...func(*managedblockchain.Options)) (*managedblockchain.ListProposalVotesOutput, error)
	ListProposals(ctx context.Context, params *managedblockchain.ListProposalsInput, optFns ...func(*managedblockchain.Options)) (*managedblockchain.ListProposalsOutput, error)
	ListTagsForResource(ctx context.Context, params *managedblockchain.ListTagsForResourceInput, optFns ...func(*managedblockchain.Options)) (*managedblockchain.ListTagsForResourceOutput, error)
	RejectInvitation(ctx context.Context, params *managedblockchain.RejectInvitationInput, optFns ...func(*managedblockchain.Options)) (*managedblockchain.RejectInvitationOutput, error)
	TagResource(ctx context.Context, params *managedblockchain.TagResourceInput, optFns ...func(*managedblockchain.Options)) (*managedblockchain.TagResourceOutput, error)
	UntagResource(ctx context.Context, params *managedblockchain.UntagResourceInput, optFns ...func(*managedblockchain.Options)) (*managedblockchain.UntagResourceOutput, error)
	UpdateMember(ctx context.Context, params *managedblockchain.UpdateMemberInput, optFns ...func(*managedblockchain.Options)) (*managedblockchain.UpdateMemberOutput, error)
	UpdateNode(ctx context.Context, params *managedblockchain.UpdateNodeInput, optFns ...func(*managedblockchain.Options)) (*managedblockchain.UpdateNodeOutput, error)
	VoteOnProposal(ctx context.Context, params *managedblockchain.VoteOnProposalInput, optFns ...func(*managedblockchain.Options)) (*managedblockchain.VoteOnProposalOutput, error)
}
