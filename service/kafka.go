// Code generated by ifacemaker; DO NOT EDIT.

package service

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/service/kafka"
)

// KafkaClient ...
type KafkaClient interface {
	Options() kafka.Options
	BatchAssociateScramSecret(ctx context.Context, params *kafka.BatchAssociateScramSecretInput, optFns ...func(*kafka.Options)) (*kafka.BatchAssociateScramSecretOutput, error)
	BatchDisassociateScramSecret(ctx context.Context, params *kafka.BatchDisassociateScramSecretInput, optFns ...func(*kafka.Options)) (*kafka.BatchDisassociateScramSecretOutput, error)
	CreateCluster(ctx context.Context, params *kafka.CreateClusterInput, optFns ...func(*kafka.Options)) (*kafka.CreateClusterOutput, error)
	CreateClusterV2(ctx context.Context, params *kafka.CreateClusterV2Input, optFns ...func(*kafka.Options)) (*kafka.CreateClusterV2Output, error)
	CreateConfiguration(ctx context.Context, params *kafka.CreateConfigurationInput, optFns ...func(*kafka.Options)) (*kafka.CreateConfigurationOutput, error)
	CreateReplicator(ctx context.Context, params *kafka.CreateReplicatorInput, optFns ...func(*kafka.Options)) (*kafka.CreateReplicatorOutput, error)
	CreateVpcConnection(ctx context.Context, params *kafka.CreateVpcConnectionInput, optFns ...func(*kafka.Options)) (*kafka.CreateVpcConnectionOutput, error)
	DeleteCluster(ctx context.Context, params *kafka.DeleteClusterInput, optFns ...func(*kafka.Options)) (*kafka.DeleteClusterOutput, error)
	DeleteClusterPolicy(ctx context.Context, params *kafka.DeleteClusterPolicyInput, optFns ...func(*kafka.Options)) (*kafka.DeleteClusterPolicyOutput, error)
	DeleteConfiguration(ctx context.Context, params *kafka.DeleteConfigurationInput, optFns ...func(*kafka.Options)) (*kafka.DeleteConfigurationOutput, error)
	DeleteReplicator(ctx context.Context, params *kafka.DeleteReplicatorInput, optFns ...func(*kafka.Options)) (*kafka.DeleteReplicatorOutput, error)
	DeleteVpcConnection(ctx context.Context, params *kafka.DeleteVpcConnectionInput, optFns ...func(*kafka.Options)) (*kafka.DeleteVpcConnectionOutput, error)
	DescribeCluster(ctx context.Context, params *kafka.DescribeClusterInput, optFns ...func(*kafka.Options)) (*kafka.DescribeClusterOutput, error)
	DescribeClusterOperation(ctx context.Context, params *kafka.DescribeClusterOperationInput, optFns ...func(*kafka.Options)) (*kafka.DescribeClusterOperationOutput, error)
	DescribeClusterOperationV2(ctx context.Context, params *kafka.DescribeClusterOperationV2Input, optFns ...func(*kafka.Options)) (*kafka.DescribeClusterOperationV2Output, error)
	DescribeClusterV2(ctx context.Context, params *kafka.DescribeClusterV2Input, optFns ...func(*kafka.Options)) (*kafka.DescribeClusterV2Output, error)
	DescribeConfiguration(ctx context.Context, params *kafka.DescribeConfigurationInput, optFns ...func(*kafka.Options)) (*kafka.DescribeConfigurationOutput, error)
	DescribeConfigurationRevision(ctx context.Context, params *kafka.DescribeConfigurationRevisionInput, optFns ...func(*kafka.Options)) (*kafka.DescribeConfigurationRevisionOutput, error)
	DescribeReplicator(ctx context.Context, params *kafka.DescribeReplicatorInput, optFns ...func(*kafka.Options)) (*kafka.DescribeReplicatorOutput, error)
	DescribeVpcConnection(ctx context.Context, params *kafka.DescribeVpcConnectionInput, optFns ...func(*kafka.Options)) (*kafka.DescribeVpcConnectionOutput, error)
	GetBootstrapBrokers(ctx context.Context, params *kafka.GetBootstrapBrokersInput, optFns ...func(*kafka.Options)) (*kafka.GetBootstrapBrokersOutput, error)
	GetClusterPolicy(ctx context.Context, params *kafka.GetClusterPolicyInput, optFns ...func(*kafka.Options)) (*kafka.GetClusterPolicyOutput, error)
	GetCompatibleKafkaVersions(ctx context.Context, params *kafka.GetCompatibleKafkaVersionsInput, optFns ...func(*kafka.Options)) (*kafka.GetCompatibleKafkaVersionsOutput, error)
	ListClientVpcConnections(ctx context.Context, params *kafka.ListClientVpcConnectionsInput, optFns ...func(*kafka.Options)) (*kafka.ListClientVpcConnectionsOutput, error)
	ListClusterOperations(ctx context.Context, params *kafka.ListClusterOperationsInput, optFns ...func(*kafka.Options)) (*kafka.ListClusterOperationsOutput, error)
	ListClusterOperationsV2(ctx context.Context, params *kafka.ListClusterOperationsV2Input, optFns ...func(*kafka.Options)) (*kafka.ListClusterOperationsV2Output, error)
	ListClusters(ctx context.Context, params *kafka.ListClustersInput, optFns ...func(*kafka.Options)) (*kafka.ListClustersOutput, error)
	ListClustersV2(ctx context.Context, params *kafka.ListClustersV2Input, optFns ...func(*kafka.Options)) (*kafka.ListClustersV2Output, error)
	ListConfigurationRevisions(ctx context.Context, params *kafka.ListConfigurationRevisionsInput, optFns ...func(*kafka.Options)) (*kafka.ListConfigurationRevisionsOutput, error)
	ListConfigurations(ctx context.Context, params *kafka.ListConfigurationsInput, optFns ...func(*kafka.Options)) (*kafka.ListConfigurationsOutput, error)
	ListKafkaVersions(ctx context.Context, params *kafka.ListKafkaVersionsInput, optFns ...func(*kafka.Options)) (*kafka.ListKafkaVersionsOutput, error)
	ListNodes(ctx context.Context, params *kafka.ListNodesInput, optFns ...func(*kafka.Options)) (*kafka.ListNodesOutput, error)
	ListReplicators(ctx context.Context, params *kafka.ListReplicatorsInput, optFns ...func(*kafka.Options)) (*kafka.ListReplicatorsOutput, error)
	ListScramSecrets(ctx context.Context, params *kafka.ListScramSecretsInput, optFns ...func(*kafka.Options)) (*kafka.ListScramSecretsOutput, error)
	ListTagsForResource(ctx context.Context, params *kafka.ListTagsForResourceInput, optFns ...func(*kafka.Options)) (*kafka.ListTagsForResourceOutput, error)
	ListVpcConnections(ctx context.Context, params *kafka.ListVpcConnectionsInput, optFns ...func(*kafka.Options)) (*kafka.ListVpcConnectionsOutput, error)
	PutClusterPolicy(ctx context.Context, params *kafka.PutClusterPolicyInput, optFns ...func(*kafka.Options)) (*kafka.PutClusterPolicyOutput, error)
	RebootBroker(ctx context.Context, params *kafka.RebootBrokerInput, optFns ...func(*kafka.Options)) (*kafka.RebootBrokerOutput, error)
	RejectClientVpcConnection(ctx context.Context, params *kafka.RejectClientVpcConnectionInput, optFns ...func(*kafka.Options)) (*kafka.RejectClientVpcConnectionOutput, error)
	TagResource(ctx context.Context, params *kafka.TagResourceInput, optFns ...func(*kafka.Options)) (*kafka.TagResourceOutput, error)
	UntagResource(ctx context.Context, params *kafka.UntagResourceInput, optFns ...func(*kafka.Options)) (*kafka.UntagResourceOutput, error)
	UpdateBrokerCount(ctx context.Context, params *kafka.UpdateBrokerCountInput, optFns ...func(*kafka.Options)) (*kafka.UpdateBrokerCountOutput, error)
	UpdateBrokerStorage(ctx context.Context, params *kafka.UpdateBrokerStorageInput, optFns ...func(*kafka.Options)) (*kafka.UpdateBrokerStorageOutput, error)
	UpdateBrokerType(ctx context.Context, params *kafka.UpdateBrokerTypeInput, optFns ...func(*kafka.Options)) (*kafka.UpdateBrokerTypeOutput, error)
	UpdateClusterConfiguration(ctx context.Context, params *kafka.UpdateClusterConfigurationInput, optFns ...func(*kafka.Options)) (*kafka.UpdateClusterConfigurationOutput, error)
	UpdateClusterKafkaVersion(ctx context.Context, params *kafka.UpdateClusterKafkaVersionInput, optFns ...func(*kafka.Options)) (*kafka.UpdateClusterKafkaVersionOutput, error)
	UpdateConfiguration(ctx context.Context, params *kafka.UpdateConfigurationInput, optFns ...func(*kafka.Options)) (*kafka.UpdateConfigurationOutput, error)
	UpdateConnectivity(ctx context.Context, params *kafka.UpdateConnectivityInput, optFns ...func(*kafka.Options)) (*kafka.UpdateConnectivityOutput, error)
	UpdateMonitoring(ctx context.Context, params *kafka.UpdateMonitoringInput, optFns ...func(*kafka.Options)) (*kafka.UpdateMonitoringOutput, error)
	UpdateReplicationInfo(ctx context.Context, params *kafka.UpdateReplicationInfoInput, optFns ...func(*kafka.Options)) (*kafka.UpdateReplicationInfoOutput, error)
	UpdateSecurity(ctx context.Context, params *kafka.UpdateSecurityInput, optFns ...func(*kafka.Options)) (*kafka.UpdateSecurityOutput, error)
	UpdateStorage(ctx context.Context, params *kafka.UpdateStorageInput, optFns ...func(*kafka.Options)) (*kafka.UpdateStorageOutput, error)
}
