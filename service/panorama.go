// Code generated by ifacemaker; DO NOT EDIT.

package service

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/service/panorama"
)

// PanoramaClient ...
type PanoramaClient interface {
	Options() panorama.Options
	CreateApplicationInstance(ctx context.Context, params *panorama.CreateApplicationInstanceInput, optFns ...func(*panorama.Options)) (*panorama.CreateApplicationInstanceOutput, error)
	CreateJobForDevices(ctx context.Context, params *panorama.CreateJobForDevicesInput, optFns ...func(*panorama.Options)) (*panorama.CreateJobForDevicesOutput, error)
	CreateNodeFromTemplateJob(ctx context.Context, params *panorama.CreateNodeFromTemplateJobInput, optFns ...func(*panorama.Options)) (*panorama.CreateNodeFromTemplateJobOutput, error)
	CreatePackage(ctx context.Context, params *panorama.CreatePackageInput, optFns ...func(*panorama.Options)) (*panorama.CreatePackageOutput, error)
	CreatePackageImportJob(ctx context.Context, params *panorama.CreatePackageImportJobInput, optFns ...func(*panorama.Options)) (*panorama.CreatePackageImportJobOutput, error)
	DeleteDevice(ctx context.Context, params *panorama.DeleteDeviceInput, optFns ...func(*panorama.Options)) (*panorama.DeleteDeviceOutput, error)
	DeletePackage(ctx context.Context, params *panorama.DeletePackageInput, optFns ...func(*panorama.Options)) (*panorama.DeletePackageOutput, error)
	DeregisterPackageVersion(ctx context.Context, params *panorama.DeregisterPackageVersionInput, optFns ...func(*panorama.Options)) (*panorama.DeregisterPackageVersionOutput, error)
	DescribeApplicationInstance(ctx context.Context, params *panorama.DescribeApplicationInstanceInput, optFns ...func(*panorama.Options)) (*panorama.DescribeApplicationInstanceOutput, error)
	DescribeApplicationInstanceDetails(ctx context.Context, params *panorama.DescribeApplicationInstanceDetailsInput, optFns ...func(*panorama.Options)) (*panorama.DescribeApplicationInstanceDetailsOutput, error)
	DescribeDevice(ctx context.Context, params *panorama.DescribeDeviceInput, optFns ...func(*panorama.Options)) (*panorama.DescribeDeviceOutput, error)
	DescribeDeviceJob(ctx context.Context, params *panorama.DescribeDeviceJobInput, optFns ...func(*panorama.Options)) (*panorama.DescribeDeviceJobOutput, error)
	DescribeNode(ctx context.Context, params *panorama.DescribeNodeInput, optFns ...func(*panorama.Options)) (*panorama.DescribeNodeOutput, error)
	DescribeNodeFromTemplateJob(ctx context.Context, params *panorama.DescribeNodeFromTemplateJobInput, optFns ...func(*panorama.Options)) (*panorama.DescribeNodeFromTemplateJobOutput, error)
	DescribePackage(ctx context.Context, params *panorama.DescribePackageInput, optFns ...func(*panorama.Options)) (*panorama.DescribePackageOutput, error)
	DescribePackageImportJob(ctx context.Context, params *panorama.DescribePackageImportJobInput, optFns ...func(*panorama.Options)) (*panorama.DescribePackageImportJobOutput, error)
	DescribePackageVersion(ctx context.Context, params *panorama.DescribePackageVersionInput, optFns ...func(*panorama.Options)) (*panorama.DescribePackageVersionOutput, error)
	ListApplicationInstanceDependencies(ctx context.Context, params *panorama.ListApplicationInstanceDependenciesInput, optFns ...func(*panorama.Options)) (*panorama.ListApplicationInstanceDependenciesOutput, error)
	ListApplicationInstanceNodeInstances(ctx context.Context, params *panorama.ListApplicationInstanceNodeInstancesInput, optFns ...func(*panorama.Options)) (*panorama.ListApplicationInstanceNodeInstancesOutput, error)
	ListApplicationInstances(ctx context.Context, params *panorama.ListApplicationInstancesInput, optFns ...func(*panorama.Options)) (*panorama.ListApplicationInstancesOutput, error)
	ListDevices(ctx context.Context, params *panorama.ListDevicesInput, optFns ...func(*panorama.Options)) (*panorama.ListDevicesOutput, error)
	ListDevicesJobs(ctx context.Context, params *panorama.ListDevicesJobsInput, optFns ...func(*panorama.Options)) (*panorama.ListDevicesJobsOutput, error)
	ListNodeFromTemplateJobs(ctx context.Context, params *panorama.ListNodeFromTemplateJobsInput, optFns ...func(*panorama.Options)) (*panorama.ListNodeFromTemplateJobsOutput, error)
	ListNodes(ctx context.Context, params *panorama.ListNodesInput, optFns ...func(*panorama.Options)) (*panorama.ListNodesOutput, error)
	ListPackageImportJobs(ctx context.Context, params *panorama.ListPackageImportJobsInput, optFns ...func(*panorama.Options)) (*panorama.ListPackageImportJobsOutput, error)
	ListPackages(ctx context.Context, params *panorama.ListPackagesInput, optFns ...func(*panorama.Options)) (*panorama.ListPackagesOutput, error)
	ListTagsForResource(ctx context.Context, params *panorama.ListTagsForResourceInput, optFns ...func(*panorama.Options)) (*panorama.ListTagsForResourceOutput, error)
	ProvisionDevice(ctx context.Context, params *panorama.ProvisionDeviceInput, optFns ...func(*panorama.Options)) (*panorama.ProvisionDeviceOutput, error)
	RegisterPackageVersion(ctx context.Context, params *panorama.RegisterPackageVersionInput, optFns ...func(*panorama.Options)) (*panorama.RegisterPackageVersionOutput, error)
	RemoveApplicationInstance(ctx context.Context, params *panorama.RemoveApplicationInstanceInput, optFns ...func(*panorama.Options)) (*panorama.RemoveApplicationInstanceOutput, error)
	SignalApplicationInstanceNodeInstances(ctx context.Context, params *panorama.SignalApplicationInstanceNodeInstancesInput, optFns ...func(*panorama.Options)) (*panorama.SignalApplicationInstanceNodeInstancesOutput, error)
	TagResource(ctx context.Context, params *panorama.TagResourceInput, optFns ...func(*panorama.Options)) (*panorama.TagResourceOutput, error)
	UntagResource(ctx context.Context, params *panorama.UntagResourceInput, optFns ...func(*panorama.Options)) (*panorama.UntagResourceOutput, error)
	UpdateDeviceMetadata(ctx context.Context, params *panorama.UpdateDeviceMetadataInput, optFns ...func(*panorama.Options)) (*panorama.UpdateDeviceMetadataOutput, error)
}
